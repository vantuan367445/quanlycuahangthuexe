CREATE OR REPLACE PROCEDURE SMS8000."CHECK_ISVTT" (phone_number IN VARCHAR2, RESULT OUT NUMBER)
IS
   sqlquery   VARCHAR (1000);
   c_result   sys_refcursor;
BEGIN
   sqlquery :=
         'select count(*) from vas_prefix a
  where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1
     )  ';
   DBMS_OUTPUT.put_line (sqlquery);

   OPEN c_result FOR sqlquery;

   FETCH c_result
    INTO RESULT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."CHECK_IS_PHONE" (phone_number IN VARCHAR2, RESULT OUT NUMBER)
IS
   sqlquery   VARCHAR (1000);
   c_result   sys_refcursor;
BEGIN
   sqlquery :=
         'select count(*) from vas_prefix a
  /*where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 */
     where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vnp))=1 OR
       instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vsm))=1 OR
        instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.evn))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.sfone ))=1
       )  ';

   dbms_output.put_line(sqlquery);
   OPEN c_result FOR sqlquery;

   FETCH c_result
    INTO RESULT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."CHK_PHONE" (phone_number IN VARCHAR2, RESULT OUT NUMBER)
IS
   sqlquery   VARCHAR (1000);
   c_result   sys_refcursor;
BEGIN
   sqlquery :=
         'select count(*) from vas_prefix a
  /*where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 */
     where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vnp))=1 OR
       instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vsm))=1 OR
        instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.evn))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.sfone ))=1
       )  ';

   dbms_output.put_line(sqlquery);
   OPEN c_result FOR sqlquery;
   
   FETCH c_result
    INTO RESULT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."CHUYEN_CP_VE_KENHGOC" 
AS
  VSR_DATA SYS_REFCURSOR;
  VSR_BDVT_DATA SYS_REFCURSOR;
  VSR_CBNN_DATA SYS_REFCURSOR;
  VSR_DAILY_DATA SYS_REFCURSOR;
  VSR_WEEKLY_DATA SYS_REFCURSOR;
  VSR_MONTHLY_DATA SYS_REFCURSOR;
  VSR_XSMB_DATA SYS_REFCURSOR;
  VSR_XSMT_DATA SYS_REFCURSOR;
  VSR_XSMN_DATA SYS_REFCURSOR;
  MSISDN         varchar2(20);
  TIME_UNREG         varchar2(20);
  TOTALSUB      NUMBER(10);
  QUERY_VSR VARCHAR2(1000);
  QUERY_VSR_BDVT VARCHAR2(1000);
  QUERY_VSR_CBNN VARCHAR2(1000);
  QUERY_VSR_DAILY VARCHAR2(1000);
  QUERY_VSR_WEEKLY VARCHAR2(1000);
  QUERY_VSR_MONTHLY VARCHAR2(1000);
  QUERY_VSR_XSMB VARCHAR2(1000);
  QUERY_VSR_XSMT VARCHAR2(1000);
  QUERY_VSR_XSMN VARCHAR2(1000);
  V_COUNT       NUMBER := 0;
  REG_ID      NUMBER(10);
  ID_PHANKENH      NUMBER(10);
  ID_KENHGOC      NUMBER(10);
BEGIN
  QUERY_VSR := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_DATA FOR QUERY_VSR;
  LOOP
    FETCH VSR_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_BDVT := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_bdvt a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_BDVT_DATA FOR QUERY_VSR_BDVT;
  LOOP
    FETCH VSR_BDVT_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_bdvt
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_BDVT_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_CBNN := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_cbnn a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_CBNN_DATA FOR QUERY_VSR_CBNN;
  LOOP
    FETCH VSR_CBNN_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_cbnn
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_CBNN_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_DAILY := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_daily a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_DAILY_DATA FOR QUERY_VSR_DAILY;
  LOOP
    FETCH VSR_DAILY_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_daily
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_DAILY_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_WEEKLY := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_weekly a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_WEEKLY_DATA FOR QUERY_VSR_WEEKLY;
  LOOP
    FETCH VSR_WEEKLY_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_weekly
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_WEEKLY_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  
  V_COUNT := 0;
  QUERY_VSR_MONTHLY := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from VAS_SUB_REG_MONTHLY a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_MONTHLY_DATA FOR QUERY_VSR_MONTHLY;
  LOOP
    FETCH VSR_MONTHLY_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE VAS_SUB_REG_MONTHLY
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_MONTHLY_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_XSMB := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_xsmb a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_XSMB_DATA FOR QUERY_VSR_XSMB;
  LOOP
    FETCH VSR_XSMB_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_xsmb
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_XSMB_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_XSMT := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_xsmt a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_XSMT_DATA FOR QUERY_VSR_XSMT;
  LOOP
    FETCH VSR_XSMT_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_xsmt
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_XSMT_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
  
  V_COUNT := 0;
  QUERY_VSR_XSMN := 'select a.id, A.SUB_SERVICE_ID, B.CHANEL from vas_sub_reg_xsmn a, vas_sub_service b where a.sub_service_id = b.id and a.status > 0 and TIME_REGISTER  < trunc(sysdate) - 365 and sub_service_id in (select service_id from PARTY_CODE where cp_name is not null)';
  OPEN VSR_XSMN_DATA FOR QUERY_VSR_XSMN;
  LOOP
    FETCH VSR_XSMN_DATA INTO REG_ID, ID_PHANKENH, ID_KENHGOC;
    DBMS_OUTPUT.put_line (REG_ID || '-' || ID_PHANKENH || '-' || ID_KENHGOC);
    IF ID_KENHGOC > 0 THEN
    UPDATE vas_sub_reg_xsmn
    SET SUB_SERVICE_ID = ID_KENHGOC
    WHERE ID = REG_ID
    AND SUB_SERVICE_ID = ID_PHANKENH
    AND STATUS > 0;
    V_COUNT             := V_COUNT + 1;
    END IF;
    IF V_COUNT           = 100 THEN
        COMMIT;
        V_COUNT := 0;
    END IF;
    COMMIT;  
    EXIT
  WHEN VSR_XSMN_DATA%NOTFOUND;
  END LOOP;
  COMMIT;
END CHUYEN_CP_VE_KENHGOC;

CREATE OR REPLACE PROCEDURE SMS8000."CHUYEN_DAUSO_PREPARE_REQUEST" (
    PREFIX_BEFORE VARCHAR2,
    PREFIX_AFTER  VARCHAR2)
AS
  ROWUPDATED NUMBER := 1000;
BEGIN
  WHILE TRUE
  LOOP
    UPDATE PREPARE_REQUEST
    SET RECEIVER = PREFIX_AFTER
      || SUBSTR(RECEIVER, LENGTH(PREFIX_BEFORE) + 1)
    WHERE SUBSTR(RECEIVER, 0, LENGTH(PREFIX_BEFORE)) = PREFIX_BEFORE
	AND MO_TIME >= TRUNC(SYSDATE) - 2
    AND ROWNUM                                    <= 100000;
    ROWUPDATED                                    := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE('so luong ban ghi update: ' || ROWUPDATED);
    IF ROWUPDATED = 0 THEN
      EXIT;
    END IF;
    COMMIT;
  END LOOP;
  UPDATE PREPARE_REQUEST
    SET RECEIVER = PREFIX_AFTER
      || SUBSTR(RECEIVER, LENGTH(PREFIX_BEFORE) + 1)
    WHERE SUBSTR(RECEIVER, 0, LENGTH(PREFIX_BEFORE)) = PREFIX_BEFORE
	AND MO_TIME >= TRUNC(SYSDATE) - 2;
  DBMS_OUTPUT.PUT_LINE('so luong ban ghi update: ' || SQL%ROWCOUNT);
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."DELETE_REFUND_150707" (
    p_error OUT VARCHAR2)
IS
  CURSOR isdn_date_cursor
  IS
  select isdn, TIME_ACTIVE from REFUND_150707;
BEGIN
   FOR v_cursor IN isdn_date_cursor ()
  LOOP
    delete from trans_log_refund_150707 where isdn = v_cursor.isdn and charged_time < v_cursor.TIME_ACTIVE;
   END LOOP;
  COMMIT;
  
  COMMIT;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  COMMIT;
END; -- Procedure;

CREATE OR REPLACE PROCEDURE SMS8000."DEQ_ARRAY_REQUEST" (
  batchsize      IN       INTEGER,
   queuename      IN       VARCHAR2,
   enqueued       OUT      INTEGER,
   enqueuearray   OUT      aq_array_request
)
IS
   r_dequeue_options   DBMS_AQ.dequeue_options_t;
   nt_msg_properties   DBMS_AQ.message_properties_array_t;
   nt_payloads         aq_array_request;
   nt_msg_ids          DBMS_AQ.msgid_array_t;
   v_dequeued_cnt      PLS_INTEGER;
   v_dequeue_batch     PLS_INTEGER;
   x_timeout           EXCEPTION;
   PRAGMA EXCEPTION_INIT (x_timeout, -25228);
BEGIN
   v_dequeue_batch := batchsize;
   r_dequeue_options.wait := 30;
   /* Prepare collections... */
   nt_payloads := aq_array_request ();
   nt_payloads.EXTEND (v_dequeue_batch);
   nt_msg_properties := DBMS_AQ.message_properties_array_t ();
   nt_msg_properties.EXTEND (v_dequeue_batch);
   nt_msg_ids := DBMS_AQ.msgid_array_t ();
   /* Dequeue 2,500 messages... */
   v_dequeued_cnt :=
      DBMS_AQ.dequeue_array (queue_name                    => queuename,
                             dequeue_options               => r_dequeue_options,
                             array_size                    => v_dequeue_batch,
                             message_properties_array      => nt_msg_properties,
                             payload_array                 => nt_payloads,
                             msgid_array                   => nt_msg_ids
                            );
   DBMS_OUTPUT.put_line (   'Dequeued ['
                         || TO_CHAR (v_dequeued_cnt)
                         || '] messages.'
                        );
   COMMIT;
   enqueued := v_dequeued_cnt;
   enqueuearray := nt_payloads;
EXCEPTION
   /* Handle exit scenario two from the notes above... */
   WHEN x_timeout
   THEN
      DBMS_OUTPUT.put_line ('No more messages to dequeue.');
END;

CREATE OR REPLACE PROCEDURE SMS8000."DEQ_ARRAY_RESPONSE" (
   batchsize      IN       INTEGER,
   queuename      IN       VARCHAR2,
   enqueued       OUT      INTEGER,
   enqueuearray   OUT      aq_array_response
)
IS
   r_dequeue_options   DBMS_AQ.dequeue_options_t;
   nt_msg_properties   DBMS_AQ.message_properties_array_t;
   nt_payloads         aq_array_response;
   nt_msg_ids          DBMS_AQ.msgid_array_t;
   v_dequeued_cnt      PLS_INTEGER;
   v_dequeue_batch     PLS_INTEGER;
   x_timeout           EXCEPTION;
   PRAGMA EXCEPTION_INIT (x_timeout, -25228);
BEGIN
   v_dequeue_batch := batchsize;
   r_dequeue_options.wait := 60;
   /* Prepare collections... */
   nt_payloads := aq_array_response ();
   nt_payloads.EXTEND (v_dequeue_batch);
   nt_msg_properties := DBMS_AQ.message_properties_array_t ();
   nt_msg_properties.EXTEND (v_dequeue_batch);
   nt_msg_ids := DBMS_AQ.msgid_array_t ();
   /* Dequeue 2,500 messages... */
   v_dequeued_cnt :=
      DBMS_AQ.dequeue_array (queue_name                    => queuename,
                             dequeue_options               => r_dequeue_options,
                             array_size                    => v_dequeue_batch,
                             message_properties_array      => nt_msg_properties,
                             payload_array                 => nt_payloads,
                             msgid_array                   => nt_msg_ids
                            );
   DBMS_OUTPUT.put_line (   'Dequeued ['
                         || TO_CHAR (v_dequeued_cnt)
                         || '] messages.'
                        );
   COMMIT;
   enqueued := v_dequeued_cnt;
   enqueuearray := nt_payloads;
EXCEPTION
   /* Handle exit scenario two from the notes above... */
   WHEN x_timeout
   THEN
      DBMS_OUTPUT.put_line ('No more messages to dequeue.');
END;

CREATE OR REPLACE PROCEDURE SMS8000."ENQUEUE_ARRAY_REQUEST" 
IS
   r_enqueue_options   DBMS_AQ.enqueue_options_t;
   r_msg_properties    DBMS_AQ.message_properties_t;
   nt_msg_properties   DBMS_AQ.message_properties_array_t;
    /*aq_array response la mot mang cac ban tin message_response (collection types)
   create or replace TYPE aq_array_response AS TABLE OF message_response;*/
   nt_payloads         aq_array_request;
   nt_msg_ids          DBMS_AQ.msgid_array_t;
   v_enqueued_cnt      PLS_INTEGER;
   mo_id           NUMBER (10);
   sessionid           NUMBER (10);
   sender              VARCHAR2 (14);
   receiver            VARCHAR2 (14);
   content             VARCHAR2 (800);
   command             VARCHAR2 (30);
   gateway             VARCHAR2 (30);
   provider            VARCHAR2 (30);
   timemo              NUMBER (20);
   smsqueue            VARCHAR2 (30);
   querystr            VARCHAR (1000);
   c_result            sys_refcursor;
BEGIN
   /* Khoi tao*/
   nt_msg_properties := DBMS_AQ.message_properties_array_t ();
   nt_msg_ids := DBMS_AQ.msgid_array_t ();
   querystr :=
      'select id, sender, receiver,content, command, gateway, provider, sessionid from vas_mo_temp'
      || ' where rownum <= 1000';
   /*Moi lan loop se thuc hien cau query tren
   cho toi khi query khong tra ve ket qua thi ket thuc loop*/
   LOOP
      /*reset lai bien nt_payloads sau moi lan lap*/
      nt_payloads := aq_array_request ();

      /*Cac ban tin se duoc enqueue vao response queue cua gateway theo co che quay vong -> chia deu tai
      Moi lan loop se duoc enqueue vao mot queue*/
      OPEN c_result FOR querystr;

      LOOP
         FETCH c_result
          INTO mo_id, sender, receiver, content, command, gateway, provider, sessionid;

         EXIT WHEN c_result%NOTFOUND;
         DBMS_OUTPUT.put_line ('ID ' || mo_id);

         /*Moi row ket qua query la mot response
         va duoc dua vao trong array*/
         nt_payloads.EXTEND;
         NT_PAYLOADS (NT_PAYLOADS.LAST) :=
            MESSAGE_REQUEST (provider,
                          gateway,
                          sessionid,
                          'sms8000',
                          sender,
                          receiver,
                          content,
                          timemo,
                          command
                         );
         nt_msg_properties.EXTEND;
         nt_msg_properties (nt_msg_properties.LAST) := r_msg_properties;
      
         DELETE FROM vas_mo_temp vsm
            WHERE vsm.ID = mo_id;

      END LOOP;

      /*exit loop neu cau query khong tra ve ket qua (count = 0)*/
      EXIT WHEN nt_payloads.COUNT IS NULL OR nt_payloads.COUNT = 0;
      
      /* Enqueue mot array voi so luong tin array==nt_payloads.COUNT*/
      v_enqueued_cnt :=
         DBMS_AQ.enqueue_array (queue_name                    => 'THANG_MO',
                                enqueue_options               => r_enqueue_options,
                                array_size                    => nt_payloads.COUNT,
                                message_properties_array      => nt_msg_properties,
                                payload_array                 => nt_payloads,
                                msgid_array                   => nt_msg_ids
                               );
      COMMIT;
      DBMS_OUTPUT.put_line (   'Enqueued ['
                            || TO_CHAR (v_enqueued_cnt)
                            || '] messages.'
                           );
      DBMS_OUTPUT.put_line (   'Received ['
                            || TO_CHAR (nt_msg_ids.COUNT)
                            || '] message IDs.'
                           );
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."ENQUEUE_ARRAY_RESPONSE" 
IS
   r_enqueue_options   DBMS_AQ.enqueue_options_t;
   r_msg_properties    DBMS_AQ.message_properties_t;
   nt_msg_properties   DBMS_AQ.message_properties_array_t;
    /*aq_array response la mot mang cac ban tin message_response (collection types)
   create or replace TYPE aq_array_response AS TABLE OF message_response;*/
   nt_payloads         aq_array_response;
   nt_msg_ids          DBMS_AQ.msgid_array_t;
   v_enqueued_cnt      PLS_INTEGER;
   mt_id               NUMBER (10);
   provider            VARCHAR2 (30);
   gateway             VARCHAR2 (30);
   messageid           VARCHAR2 (10);
   sessionid           VARCHAR2 (10);
   serviceid           VARCHAR2 (30);
   sender              VARCHAR2 (14);
   receiver            VARCHAR2 (14);
   prcrtn              INTEGER;
   status              INTEGER;
   contenttype         INTEGER;
   contentmt           VARCHAR2 (800);
   timemt              NUMBER;
   num                 NUMBER (1)                         := 0;
   gatequeue            VARCHAR2 (30);
   querystr            VARCHAR (1000);
   c_result            sys_refcursor;
BEGIN
   /* Khoi tao*/
   nt_msg_properties := DBMS_AQ.message_properties_array_t ();
   nt_msg_ids := DBMS_AQ.msgid_array_t ();
   querystr :=
      'select id,supply,gateway,msg_id,sessionid,service,sender,receiver,service_rtn,status,msg_type,message,mt_time from vas_mt_temp'
      || ' where rownum <= 1000';
   /*Moi lan loop se thuc hien cau query tren
   cho toi khi query khong tra ve ket qua thi ket thuc loop*/
   LOOP
      /*reset lai bien nt_payloads sau moi lan lap*/
      nt_payloads := aq_array_response ();
      /*Cac ban tin se duoc enqueue vao response queue cua gateway theo co che quay vong -> chia deu tai
      Moi lan loop se duoc enqueue vao mot queue*/
      num := num + 1;

      IF num = 1
      THEN
         gatequeue := 'response_gate84_queue';
      ELSIF num = 2
      THEN
         gatequeue := 'response_gate86_queue';
         num := 0;
      END IF;
      
      /*Cac ban tin se duoc enqueue vao response queue cua gateway theo co che quay vong -> chia deu tai
      Moi lan loop se duoc enqueue vao mot queue*/
      OPEN c_result FOR querystr;

      LOOP
         FETCH c_result
          INTO mt_id, provider, gateway, messageid, sessionid, serviceid, sender,
              receiver, prcrtn, status, contenttype, contentmt, timemt;

         EXIT WHEN c_result%NOTFOUND;
         DBMS_OUTPUT.put_line ('MT_ID ' || mt_id);

          /*Moi row ket qua query la mot response
         va duoc dua vao trong array*/
         nt_payloads.EXTEND;
         nt_payloads (nt_payloads.LAST) :=
           message_response (provider,
                           gateway,
                           messageid,
                           sessionid,
                           serviceid,
                           sender,
                           receiver,
                           prcrtn,
                           status,
                           contenttype,
                           contentmt,
                           timemt
                          );
         nt_msg_properties.EXTEND;
         nt_msg_properties (nt_msg_properties.LAST) := r_msg_properties;
      
         DELETE FROM vas_mt_temp vsm
            WHERE vsm.ID = mt_id;

      END LOOP;

      /*exit loop neu cau query khong tra ve ket qua (count = 0)*/
      EXIT WHEN nt_payloads.COUNT IS NULL OR nt_payloads.COUNT = 0;
      
      /* Enqueue mot array voi so luong tin array==nt_payloads.COUNT*/
      v_enqueued_cnt :=
         DBMS_AQ.enqueue_array (queue_name                    => gatequeue,
                                enqueue_options               => r_enqueue_options,
                                array_size                    => nt_payloads.COUNT,
                                message_properties_array      => nt_msg_properties,
                                payload_array                 => nt_payloads,
                                msgid_array                   => nt_msg_ids
                               );
      COMMIT;
      DBMS_OUTPUT.put_line (   'Enqueued ['
                            || TO_CHAR (v_enqueued_cnt)
                            || '] messages.'
                           );
      DBMS_OUTPUT.put_line (   'Received ['
                            || TO_CHAR (nt_msg_ids.COUNT)
                            || '] message IDs.'
                           );
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."ENQUEUE_RESPONSE" (
   provider      IN   VARCHAR2,
   gateway       IN   VARCHAR2,
   messageid     IN   VARCHAR2,
   sessionid     IN   VARCHAR2,
   serviceid     IN   VARCHAR2,
   sender        IN   VARCHAR2,
   receiver      IN   VARCHAR2,
   prcrtn        IN   INTEGER,
   status        IN   INTEGER,
   contenttype   IN   INTEGER,
   contentmt     IN   VARCHAR2,
   timemt        IN   NUMBER
)
IS
   enqueue_options   DBMS_AQ.enqueue_options_t;
   msg_properties    DBMS_AQ.message_properties_t;
   message_id          RAW (16);
   my_message          message_response;
BEGIN
   my_message :=
      message_response (provider,
                        gateway,
                        messageid,
                        sessionid,
                        serviceid,
                        sender,
                        receiver,
                        prcrtn,
                        status,
                        contenttype,
                        contentmt,
                        timemt
                       ); 
   DBMS_AQ.enqueue (queue_name              => 'THANG_RES',
                    enqueue_options         => enqueue_options,
                    message_properties      => msg_properties,
                    payload                 => my_message,
                    msgid                   => message_id
                   );
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."INSERT_GW_MT" 
IS
   c_count     NUMBER (10)     := 0; 
BEGIN
    c_count := 0;
     while c_count < 5000000
     loop
      Insert into GW_MT 
      (SESSIONID,SUM_MT,SUPPLY,MSG_ID,SENDER,RECEIVER,SERVICE,MESSAGE,MT_TIME,SERVICE_RTN,MSG_TYPE,MSG_LEN,STATUS,GATEWAY,ID) 
      values (98770417 + c_count,1,'smsc_thangnd21',98770417 + c_count,'8000','841688119716','vaspsub','SUB_TETTEEE_001',sysdate,0,0,14,2,'gw_thangnd21',GW_MT_SEQ.nextval);
      c_count := c_count + 1;
      end loop;
END;

CREATE OR REPLACE PROCEDURE SMS8000."INSERT_REPORT_9123" 
IS
  CURSOR c_data
  IS
    SELECT id,
      sub_service_code
    FROM vas_sub_service
    WHERE status = 1
    AND sub_service_code LIKE '9123%';
  --v_data c_data%ROWTYPE;
BEGIN
  FOR v_data IN c_data()
  LOOP
    INSERT
    INTO report_9123
      (
        id,
        report_date,
        sub_service_id,
        sub_service_code,
        channel
      )
      VALUES
      (
        report_9123_seq.nextval,
        TRUNC(sysdate),
        v_data.id,
        v_data.sub_Service_code,
        '9123'
      );
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."INSERT_SCHEDULE_SUB" 
    ( SUB_ID_IN IN number,
      SERVICE_ID_IN IN NUMBER,
      DAY_SENT IN varchar2,
      HOUR_SENT IN float )
    is
     VAS_SUB_TEXT_SER_ID number;
     WAIT_END float;
     RESULT number;
BEGIN
   select count(*) into RESULT from VAS_SUB_TEXTBASE_SERVICE
   where SUB_ID=SUB_ID_IN and SERVICE_ID=SERVICE_ID_IN and DAILY_RUN=DAY_SENT;
   if RESULT=1 then
       SELECT id INTO VAS_SUB_TEXT_SER_ID from VAS_SUB_TEXTBASE_SERVICE
       where SUB_ID=SUB_ID_IN and SERVICE_ID=SERVICE_ID_IN and DAILY_RUN=DAY_SENT;

       Wait_end := HOUR_SENT+0.25;

       INSERT into VAS_SUB_SERVICE_SCHEDULE(ID,WAIT_PROCESS_BEGIN,WAIT_PROCESS_END,VAS_SUB_TEXBASE_SERVICE_ID)
       values(VAS_SUB_SERVICE_SCHEDULE_SEQ.NEXTVAL,HOUR_SENT,Wait_end,VAS_SUB_TEXT_SER_ID);
   else
       INSERT into VAS_SUB_TEXTBASE_SERVICE(ID,STATUS,DAILY_RUN,SUB_ID,SERVICE_ID)
       values(VAS_SUB_TEXTBASE_SERVICE_SEQ.NEXTVAL,1,DAY_SENT,SUB_ID_IN,SERVICE_ID_IN);

       SELECT id INTO VAS_SUB_TEXT_SER_ID from VAS_SUB_TEXTBASE_SERVICE
       where SUB_ID=SUB_ID_IN and SERVICE_ID=SERVICE_ID_IN and DAILY_RUN=DAY_SENT;

       Wait_end := HOUR_SENT+0.25;
       INSERT into VAS_SUB_SERVICE_SCHEDULE(ID,WAIT_PROCESS_BEGIN,WAIT_PROCESS_END,VAS_SUB_TEXBASE_SERVICE_ID)
       values(VAS_SUB_SERVICE_SCHEDULE_SEQ.NEXTVAL,HOUR_SENT,Wait_end,VAS_SUB_TEXT_SER_ID);

   end if;

  END;

CREATE OR REPLACE PROCEDURE SMS8000."KILL_SESSION" ( session_id in varchar2,
serial_num in varchar2)
AS
cur INTEGER;
ret INTEGER;
string VARCHAR2(100);
BEGIN
 string :=
        'ALTER SYSTEM KILL SESSION' || CHR(10) ||
CHR(39)||session_id||','||serial_num||CHR(39);
-- string :=
--          'ALTER SYSTEM DISCONNECT SESSION' || CHR(10) ||
-- CHR(39)||session_id||','||serial_num||CHR(39)||CHR(10)||
--' POST_TRANSACTION';
   cur := dbms_sql.open_cursor;
   dbms_sql.parse(cur,string,dbms_sql.v7);
   ret := dbms_sql.execute(cur)  ;
   dbms_sql.close_cursor(cur);
EXCEPTION
   WHEN OTHERS THEN
      raise_application_error(-20001,'Error in execution',TRUE);
      IF dbms_sql.is_open(cur) THEN
        dbms_sql.close_cursor(cur);
      END IF;
END;

lock table gw_retry_mt in exclusive mode;

CREATE OR REPLACE PROCEDURE SMS8000."PROCEDURE_BACKUP" (
   name_table_backup     IN    VARCHAR2,
   name_table_root   IN   VARCHAR2
)
IS
stmt varchar2(1000);
BEGIN
IF name_table_backup IS NOT NULL and name_table_root IS NOT NULL
THEN
  DBMS_OUTPUT.put_line('root_table  : ' || name_table_root);
  DBMS_OUTPUT.put_line('backup_table  : ' || name_table_backup);
stmt:= 'create table ' || name_table_backup || ' nologging as select * from ' || name_table_root;
DBMS_OUTPUT.PUT_LINE('backup success');
execute immediate stmt;
COMMIT;
    END IF;
COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROCEDURE_ROLLBACK" (
   name_table_backup     IN    VARCHAR2,
   name_table_root   IN   VARCHAR2
)
IS
stmt varchar2(1000);
sql_stmt2 VARCHAR2(2000);
BEGIN
IF name_table_backup IS NOT NULL and name_table_root IS NOT NULL
THEN
  DBMS_OUTPUT.put_line('root_table  : ' || name_table_root);
  DBMS_OUTPUT.put_line('backup_table  : ' || name_table_backup);

stmt:= 'delete from ' || name_table_root || '';
execute immediate stmt;

sql_stmt2:=  'insert into ' || name_table_root || ' (select * from '|| name_table_backup ||')';
execute immediate sql_stmt2;
COMMIT;
    END IF;
COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;

END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_INSERT_VSR" 
IS
   c_count     NUMBER (10)     := 0; 
BEGIN
    c_count := 0;
     while c_count < 500000
     loop
     Insert /*+append*/ into VAS_SUB_REG 
      (ID,ISDN,TIME_REGISTER,TIME_UNREGISTER,STATUS,PARAMETER,SUB_SERVICE_ID,TYPE,CUST_STATUS,CHARGED,TOTAL_FAIL,PREPARED,RECHARGED,CHARGED_DATE,ALREADY_CHARGED,OLD_CUST,PREPARE_DAY_FREE,RETRY_SEND,KM_CODE,CHARGE_NEXT_TIME,IS_KM,ALREADY_PREPARED) 
      values (VAS_SUB_SEQ.nextval,84988364993 + c_count,sysdate,null,3,null,11991,0,'PRE_01',10,1,0,0,null,0,0,'0',0,null,null,0,0);
      c_count := c_count + 1;
      end loop;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT" (r_date in date)
IS
BEGIN
   DBMS_OUTPUT.put_line ('proc_report_common_sms ----------------------------');
   proc_report_common_sms (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_sub ----------------------------');
   proc_report_common_sub (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_daily --------------------------');
   proc_report_common_daily (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_daily2 -------------------------');
   proc_report_common_daily2 (r_date);
   DBMS_OUTPUT.put_line ('proc_report_detail_daily --------------------------');
   proc_report_detail_daily (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_month --------------------------');
   proc_report_common_month (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_month2 -------------------------');
   proc_report_common_month2 (r_date);
   DBMS_OUTPUT.put_line ('proc_report_detail_month --------------------------');
   proc_report_detail_month (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_year ---------------------------');
   proc_report_common_year (r_date);
   DBMS_OUTPUT.put_line ('proc_report_common_year2 --------------------------');
   proc_report_common_year2 (r_date);
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_8000" 
IS
   r_date   DATE;
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   proc_report (r_date);

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_8000... SUCCESS', r_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_8000... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_DAILY" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportcommonid   NUMBER;                                               -- ID
   -- MO, MT, SMS
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT RECEIVER, SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM DAILY_COMMON_REPORT WHERE 
         TO_CHAR(REPORT_DATE,''dd/MM/yyyy'') = '''
      || reportdate
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO recv, recvtotal, senttotal, smsrepair, smserror, smsvalid,
            moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      -- Sub count
      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      SELECT COUNT (DISTINCT (sender))
        INTO subcount
        FROM mo_table
       WHERE TO_CHAR (mo_table.mo_time, 'dd/MM/yyyy') = reportdate
         AND mo_table.receiver LIKE recvext;

      DBMS_OUTPUT.put_line (reportdate || '-' || recv || '-' || subcount);
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common_daily
       WHERE receiver = recv AND TO_CHAR (report_date, 'dd/MM/yyyy') =
                                                                      reportdate;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_daily
                     (receiver, sms_receive, sms_sent, sms_repair, sms_error,
                      sms_valid, money, money_vat,
                      report_date, sub_count, arpu
                     )
              VALUES (recv, recvtotal, senttotal, smsrepair, smserror,
                      smsvalid, moneytotal, moneyvat,
                      TO_DATE (reportdate, 'dd/MM/yyyy'), subcount, arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_daily
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_DAILY2" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportcommonid   NUMBER;                                               -- ID
   telcoid          NUMBER;
   telconame        VARCHAR2 (20);
   parentcode       VARCHAR2 (50);
   parentid         NUMBER;
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT TELCO_ID, TELCO_NAME, PARENT_CODE, PARENT_ID,RECEIVER, 
         SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM DAILY_COMMON_REPORT2 WHERE 
         TO_CHAR(REPORT_DATE,''dd/MM/yyyy'') = '''
      || reportdate
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO telcoid, telconame, parentcode, parentid, recv, recvtotal,
            senttotal, smsrepair, smserror, smsvalid, moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      -- Sub count
      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      IF telcoid = 0                                                  -- SMS8000
      THEN
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_mo
          WHERE TO_CHAR (vas_mo.mo_time, 'dd/MM/yyyy') = reportdate
            AND vas_mo.receiver LIKE recvext
            AND vas_mo.service_id IN (SELECT service_id
                                        FROM vas_service
                                       WHERE parent_service_id = parentid);
      ELSE
         -- SUBSCRIPTION
         SELECT COUNT (DISTINCT (receiver))
           INTO subcount
           FROM vas_sub_mo
          WHERE TO_CHAR (vas_sub_mo.mo_time, 'dd/MM/yyyy') = reportdate
            AND vas_sub_mo.sender LIKE recvext
            AND vas_sub_mo.service_id IN (SELECT service_id
                                            FROM vas_service
                                           WHERE parent_service_id = parentid);
      END IF;

      DBMS_OUTPUT.put_line (   reportdate
                            || '-'
                            || parentid
                            || '-'
                            || recv
                            || '-'
                            || subcount
                           );
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT max(ID)
        INTO reportcommonid
        FROM report_common_daily2
       WHERE receiver = recv
         AND TO_CHAR (report_date, 'dd/MM/yyyy') = reportdate
         AND telco_id = telcoid
         AND parent_id = parentid;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_daily2
                     (telco_id, telco_name, parent_id, parent_code, receiver,
                      sms_receive, sms_sent, sms_repair, sms_error, sms_valid,
                      money, money_vat,
                      report_date, sub_count, arpu
                     )
              VALUES (telcoid, telconame, parentid, parentcode, recv,
                      recvtotal, senttotal, smsrepair, smserror, smsvalid,
                      moneytotal, moneyvat,
                      TO_DATE (reportdate, 'dd/MM/yyyy'), subcount, arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_daily2
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_MONTH" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportmonth      VARCHAR2 (6);                               -- Report Month
   reportcommonid   NUMBER;                                               -- ID
   -- MO, MT, SMS
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                           -- MO Num (Not Having MT)
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportmonth := TO_CHAR (r_date, 'yyyyMM');
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT RECEIVER, SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM MONTH_COMMON_REPORT WHERE 
         TO_CHAR(REPORT_MONTH,''yyyyMM'') = '''
      || reportmonth
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO recv, recvtotal, senttotal, smsrepair, smserror, smsvalid,
            moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      SELECT COUNT (DISTINCT (sender))
        INTO subcount
        FROM mo_table
       WHERE TO_CHAR (mo_table.mo_time, 'yyyyMM') = reportmonth
         AND mo_table.receiver LIKE recvext;

      DBMS_OUTPUT.put_line (reportmonth || '-' || recv || '-' || subcount);
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common_month
       WHERE receiver = recv AND TO_CHAR (report_month, 'yyyyMM') = reportmonth;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_month
                     (receiver, sms_receive, sms_sent, sms_repair, sms_error,
                      sms_valid, money, money_vat, report_month,
                      sub_count, arpu
                     )
              VALUES (recv, recvtotal, senttotal, smsrepair, smserror,
                      smsvalid, moneytotal, moneyvat, TRUNC (r_date, 'MM'),
                      subcount, arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_month
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_MONTH2" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportmonth      VARCHAR2 (6);                                -- Report Date
   reportcommonid   NUMBER;                                               -- ID
   telcoid          NUMBER;
   telconame        VARCHAR2 (20);
   parentcode       VARCHAR2 (50);
   parentid         NUMBER;
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportmonth := TO_CHAR (r_date, 'yyyyMM');
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT TELCO_ID, TELCO_NAME, PARENT_CODE, PARENT_ID,RECEIVER, 
         SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM MONTH_COMMON_REPORT2 WHERE 
         TO_CHAR(REPORT_MONTH,''yyyyMM'') = '''
      || reportmonth
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO telcoid, telconame, parentcode, parentid, recv, recvtotal,
            senttotal, smsrepair, smserror, smsvalid, moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      IF telcoid = 0                                                  -- SMS8000
      THEN
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_mo
          WHERE TO_CHAR (vas_mo.mo_time, 'yyyyMM') = reportmonth
            AND vas_mo.receiver LIKE recvext
            AND vas_mo.service_id IN (SELECT service_id
                                        FROM vas_service
                                       WHERE parent_service_id = parentid);
      ELSE                                                       -- SUBSCRIPTION
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_sub_mo
          WHERE TO_CHAR (vas_sub_mo.mo_time, 'yyyyMM') = reportmonth
            AND vas_sub_mo.sender LIKE recvext
            AND vas_sub_mo.service_id IN (SELECT service_id
                                            FROM vas_service
                                           WHERE parent_service_id = parentid);
      END IF;

      DBMS_OUTPUT.put_line (   reportmonth
                            || '-'
                            || telcoid
                            || '-'
                            || parentid
                            || '-'
                            || recv
                            || '-'
                            || subcount
                           );
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common_month2
       WHERE receiver = recv
         AND TO_CHAR (report_month, 'yyyyMM') = reportmonth
         AND telco_id = telcoid
         AND parent_id = parentid;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_month2
                     (telco_id, telco_name, parent_id, parent_code, receiver,
                      sms_receive, sms_sent, sms_repair, sms_error, sms_valid,
                      money, money_vat, report_month, sub_count,
                      arpu
                     )
              VALUES (telcoid, telconame, parentid, parentcode, recv,
                      recvtotal, senttotal, smsrepair, smserror, smsvalid,
                      moneytotal, moneyvat, TRUNC (r_date, 'MM'), subcount,
                      arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_month2
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_SMS" (r_date IN DATE, max_id IN NUMBER, min_id NUMBER)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportcommonid   NUMBER;                                               -- ID
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportnextdate   VARCHAR2 (20);                          -- Report Next Date
   -- Service
   serviceid        NUMBER;                                       -- Service ID
   servicecode      VARCHAR2 (50);                              -- Service Code
   parentid         NVARCHAR2 (50);                        -- Parent Service ID
   parentcode       VARCHAR2 (50);                       -- Parent Service Code
   recv             NUMBER;                                  -- Received Number
   telconame        NVARCHAR2 (10);                               -- Telco Name
   -- MO, MT, SMS
   recvtotal        NUMBER;                                         -- MO Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   batch_number   NUMBER;
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   reportnextdate := TO_CHAR (r_date + 1, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   querystr :=
         'SELECT VAS_SERVICE_NUMBER.SERVICE_NUMBER,
                 VAS_MO_TMP.SERVICE_ID,
                 COUNT(VAS_MO_TMP.TMP_ID)
            FROM VAS_MO_TMP, VAS_SERVICE_NUMBER
           WHERE VAS_MO_TMP.TMP_ID >= '
      || min_id
      || ' AND VAS_MO_TMP.TMP_ID <= '
      || max_id
      || ' AND VAS_MO_TMP.MO_TIME >= to_date('''
      || reportdate
      || ''', ''dd/MM/yyyy'')
      AND VAS_MO_TMP.MO_TIME < to_date('''
      || reportnextdate
      || ''', ''dd/MM/yyyy'')'
      || ' AND (VAS_MO_TMP.RECEIVER = VAS_SERVICE_NUMBER.SERVICE_NUMBER
           OR VAS_MO_TMP.RECEIVER = VAS_SERVICE_NUMBER.ALIAS)'
      || ' GROUP BY VAS_SERVICE_NUMBER.SERVICE_NUMBER,VAS_MO_TMP.SERVICE_ID';
   batch_number := 0;

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO recv, serviceid, recvtotal;

      EXIT WHEN c_result%NOTFOUND;
      DBMS_OUTPUT.put_line (recv || '-' || serviceid);

      SELECT service_code
        INTO servicecode
        FROM vas_service_full
       WHERE service_id = serviceid;

      SELECT service_id, service_code
        INTO parentid, parentcode
        FROM vas_service_full
       WHERE service_id = (SELECT parent_service_id
                             FROM vas_service_full
                            WHERE service_id = serviceid);

      DBMS_OUTPUT.put_line ('sent');

      -- smsrepair (3,4)
      SELECT COUNT (VAS_MO_TMP.TMP_ID)
        INTO smsrepair
        FROM vas_mo_tmp
       WHERE tmp_id >= min_id
         AND tmp_id <= max_id
         AND vas_mo_tmp.mo_time >= TO_DATE (reportdate, 'dd/MM/yyyy')
         AND vas_mo_tmp.mo_time < TO_DATE (reportnextdate, 'dd/MM/yyyy')
         AND vas_mo_tmp.receiver = recv
         AND vas_mo_tmp.service_id = serviceid
         AND status IN (3, 4);

      -- smserror (2,3,4,6)
      SELECT COUNT (VAS_MO_TMP.TMP_ID)
        INTO smserror
        FROM vas_mo_tmp
       WHERE tmp_id >= min_id
         AND tmp_id <= max_id
         AND vas_mo_tmp.mo_time >= TO_DATE (reportdate, 'dd/MM/yyyy')
         AND vas_mo_tmp.mo_time < TO_DATE (reportnextdate, 'dd/MM/yyyy')
         AND vas_mo_tmp.receiver = recv
         AND vas_mo_tmp.service_id = serviceid
         AND status IN (2, 3, 4, 6);

      -- smsvalid (1,3,4) = recvtotal (1,2,3,4,6) + smsrepair(3,4) - smserror(2,3,4,6)
      smsvalid := recvtotal + smsrepair - smserror;
      -- Money
      moneytotal := smsvalid * get_price (recv);
      moneyvat := moneytotal / 1.1;

      -- Max Report ID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common
       WHERE receiver = recv
         AND service_id = serviceid
         AND report_date >= TO_DATE (reportdate, 'dd/MM/yyyy')
         AND report_date < TO_DATE (reportnextdate, 'dd/MM/yyyy')
         AND telco_name = '0';

      DBMS_OUTPUT.put_line ('id' || ':' || reportcommonid);

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common
                     (receiver, sms_receive, sms_repair, sms_error, sms_valid,
                      money, money_vat,
                      report_date, telco_name, service_code,
                      service_id, parent_code, parent_id
                     )
              VALUES (recv, recvtotal, smsrepair, smserror, smsvalid,
                      moneytotal, moneyvat,
                      TO_DATE (reportdate, 'dd/MM/yyyy'), '0', servicecode,
                      serviceid, parentcode, parentid
                     );
      ELSE
         UPDATE report_common
            SET sms_receive = (sms_receive + recvtotal),
                sms_repair = (sms_repair + smsrepair),
                sms_error = (sms_error + smserror),
                sms_valid = (sms_valid + smsvalid),
                money = (money + moneytotal),
                money_vat = (money_vat + moneyvat)
          WHERE ID = reportcommonid;
      END IF;

      batch_number := batch_number + 1;

      IF batch_number = 100
      THEN
         COMMIT;
         batch_number := 0;
      END IF;

   END LOOP;

   COMMIT;

   DBMS_OUTPUT.put_line ('finish');
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('fail' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_SMS_NEW" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportcommonid   NUMBER;                                               -- ID
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportnextdate   VARCHAR2 (20);                          -- Report Next Date
   -- Service
   serviceid        NUMBER;                                       -- Service ID
   servicecode      VARCHAR2 (50);                              -- Service Code
   parentid         NVARCHAR2 (50);                        -- Parent Service ID
   parentcode       VARCHAR2 (50);                       -- Parent Service Code
   recv             NUMBER;                                  -- Received Number
   telconame        NVARCHAR2 (10);                               -- Telco Name
   -- MO, MT, SMS
   recvtotal        NUMBER;                                         -- MO Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   batch_number     NUMBER;
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   reportnextdate := TO_CHAR (r_date + 1, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   querystr :=
         'SELECT VAS_SERVICE_NUMBER.SERVICE_NUMBER,
                 VAS_MO_HIS.SERVICE_ID,
                 COUNT(*)
            FROM VAS_MO_HIS, VAS_SERVICE_NUMBER
           WHERE VAS_MO_HIS.MO_TIME >= trunc(r_date) AND (VAS_MO_HIS.RECEIVER = VAS_SERVICE_NUMBER.SERVICE_NUMBER
           OR VAS_MO_HIS.RECEIVER = VAS_SERVICE_NUMBER.ALIAS) GROUP BY VAS_SERVICE_NUMBER.SERVICE_NUMBER,VAS_MO_HIS.SERVICE_ID';
   batch_number := 0;

   OPEN c_result FOR querystr;--lay thong tin:dau so,ma dich vu, count(tin nhan MO)

   LOOP
      FETCH c_result
       INTO recv, serviceid, recvtotal;--recv:dau so; serviceid, recvtotal:tong tin nhan MO

      EXIT WHEN c_result%NOTFOUND;--khong co ban ghi:no record
      DBMS_OUTPUT.put_line (recv || '-' || serviceid);

      SELECT service_code
        INTO servicecode
        FROM vas_service_full
       WHERE service_id = serviceid;

      SELECT service_id, service_code
        INTO parentid, parentcode
        FROM vas_service_full
       WHERE service_id = (SELECT parent_service_id
                             FROM vas_service_full
                            WHERE service_id = serviceid);

      IF servicecode IS NULL
      THEN
            SELECT service_code
            INTO servicecode
            FROM vas_service_full
           WHERE service_id = -2;--service_code='OTHERS'

          SELECT service_id, service_code
            INTO parentid, parentcode
            FROM vas_service_full
           WHERE service_id = -3;
      END IF;

      DBMS_OUTPUT.put_line ('sent');

      -- smsrepair (3,4)
      SELECT COUNT (*)
        INTO smsrepair
        FROM VAS_MO_HIS
       WHERE mo_time >= trunc(r_date)
         AND vas_mo_his.receiver = recv
         AND vas_mo_his.service_id = serviceid
         AND status IN (3, 4);

      -- smserror (2,3,4,6)
      SELECT COUNT (*)--count(so luong tin nhan MO)
        INTO smserror
        FROM vas_mo_his
       WHERE mo_time >= trunc(r_date)
         AND vas_mo_his.receiver = recv
         AND vas_mo_his.service_id = serviceid
         AND status IN (2, 3, 4, 6);

      -- smsvalid (1,3,4) = recvtotal (1,2,3,4,6) + smsrepair(3,4) - smserror(2,3,4,6)
      smsvalid := recvtotal + smsrepair - smserror;--so luong tin nhan hop le=tong+tin prepair-tinMo ko hop le
      -- Money
      moneytotal := recvtotal * get_price (recv);--tong doanh thu
      moneyvat := moneytotal / 1.1;--gia tri gia tang

      -- Max Report ID
      SELECT MAX (ID)--lay ban ghi moi nhat cap nhat bao cao trong bang common
        INTO reportcommonid
        FROM report_common
       WHERE receiver = recv
         AND service_id = serviceid
         AND report_date >= TO_DATE (reportdate, 'dd/MM/yyyy')
         AND report_date < TO_DATE (reportnextdate, 'dd/MM/yyyy')
         AND telco_name = '0';

      DBMS_OUTPUT.put_line ('id' || ':' || reportcommonid);

      IF reportcommonid IS NOT NULL
      THEN
         
                     UPDATE report_common--update bao cao
            SET sms_receive = recvtotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat
          WHERE ID = reportcommonid;
      ELSE
         INSERT INTO report_common--insert ban ghi moi khi chua tong hop bao cao ngay
                     (receiver, sms_receive, sms_repair, sms_error, sms_valid,
                      money, money_vat,
                      report_date, telco_name, service_code,
                      service_id, parent_code, parent_id
                     )
              VALUES (recv, recvtotal, smsrepair, smserror, smsvalid,
                      moneytotal, moneyvat,
                      TO_DATE (reportdate, 'dd/MM/yyyy'), '0', servicecode,
                      serviceid, parentcode, parentid
                     );
      END IF;

      batch_number := batch_number + 1;

      IF batch_number = 100
      THEN
         COMMIT;
         batch_number := 0;
      END IF;

   END LOOP;

   COMMIT;

   DBMS_OUTPUT.put_line ('finish');
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE ('fail' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_SUB" (
   r_date   IN   DATE,
   max_id        NUMBER,
   min_id        NUMBER
)
IS
   -- Variables
   c_result         sys_refcursor;                             -- Report List
   querystr         VARCHAR2 (1000);                          -- Query String
   reportdate       VARCHAR2 (20);                             -- Report Date
   reportnextdate   VARCHAR2 (20);                        -- Report Next Date
   reportcommonid   NUMBER;                                             -- ID
   -- Service
   subserviceid     NUMBER;                                     -- Service ID
   subservicecode   VARCHAR2 (50);                            -- Service Code
   recv             NUMBER;                                -- Received Number
   telconame        VARCHAR2 (10);                              -- Telco Name
   smsvalid         NUMBER;                                       -- MO Total
   batch_number     NUMBER;

   CURSOR report_cursor
   IS
      SELECT receiver, sms_receive, sms_repair, sms_error, sms_valid, money,
             money_vat, report_date, telco_name, service_code, service_id,
             parent_code, parent_id, ID
        FROM report_common_fee;
BEGIN
   batch_number := 0;

   FOR v_report_cursor IN report_cursor ()
   LOOP
      UPDATE report_common
         SET sms_valid = v_report_cursor.sms_valid,
             money = v_report_cursor.money,
             money_vat = v_report_cursor.money_vat
       WHERE receiver = v_report_cursor.receiver
         AND service_id = v_report_cursor.service_id
         AND report_date = v_report_cursor.report_date
         AND telco_name = v_report_cursor.telco_name;

      IF (SQL%ROWCOUNT = 0)
      THEN
         INSERT INTO report_common
                     (receiver, sms_receive,
                      sms_repair, sms_error,
                      sms_valid, money,
                      money_vat,
                      report_date,
                      telco_name,
                      service_code,
                      service_id,
                      parent_code,
                      parent_id, ID
                     )
              VALUES (v_report_cursor.receiver, v_report_cursor.sms_receive,
                      v_report_cursor.sms_repair, v_report_cursor.sms_error,
                      v_report_cursor.sms_valid, v_report_cursor.money,
                      v_report_cursor.money_vat,
                      v_report_cursor.report_date,
                      v_report_cursor.telco_name,
                      v_report_cursor.service_code,
                      v_report_cursor.service_id,
                      v_report_cursor.parent_code,
                      v_report_cursor.parent_id, v_report_cursor.ID
                     );
      END IF;

      DELETE FROM report_common_fee
            WHERE ID = v_report_cursor.ID;

      batch_number := batch_number + 1;

      IF batch_number = 100
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
   END LOOP;

   COMMIT;
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   reportnextdate := TO_CHAR (r_date + 1, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   querystr :=
         'SELECT VAS_SERVICE_NUMBER.SERVICE_NUMBER, 
                 VAS_SUB_MO_TMP.SUB_SERVICE_ID,
                 COUNT(VAS_SUB_MO_TMP.TMP_ID)
            FROM VAS_SUB_MO_TMP, VAS_SERVICE_NUMBER
           WHERE TMP_ID <= '
      || max_id
      || ' AND TMP_ID >= '
      || min_id
      || ' AND VAS_SUB_MO_TMP.MO_TIME >= to_date('''
      || reportdate
      || ''', ''dd/MM/yyyy'')
      AND VAS_SUB_MO_TMP.MO_TIME < to_date('''
      || reportnextdate
      || ''', ''dd/MM/yyyy'')'
      || ' AND (VAS_SUB_MO_TMP.SENDER = VAS_SERVICE_NUMBER.SERVICE_NUMBER
           OR VAS_SUB_MO_TMP.SENDER = VAS_SERVICE_NUMBER.ALIAS)'
      || ' GROUP BY VAS_SERVICE_NUMBER.SERVICE_NUMBER,VAS_SUB_MO_TMP.SUB_SERVICE_ID';
   batch_number := 0;

   OPEN c_result FOR querystr;

   DBMS_OUTPUT.put_line ('Query Success');

   LOOP
      FETCH c_result
       INTO recv, subserviceid, smsvalid;

      EXIT WHEN c_result%NOTFOUND;
      DBMS_OUTPUT.put_line (recv || '- ' || subserviceid);

      SELECT sub_command
        INTO subservicecode
        FROM vas_sub_service
       WHERE ID = subserviceid;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common
       WHERE receiver = recv
         AND service_id = subserviceid
         AND report_date >= TO_DATE (reportdate, 'dd/MM/yyyy')
         AND report_date < TO_DATE (reportnextdate, 'dd/MM/yyyy')
         AND telco_name = '1';

      IF reportcommonid IS NOT NULL
      THEN
         UPDATE report_common
            SET sms_receive = (sms_receive + smsvalid)
          WHERE ID = reportcommonid;
      END IF;

      batch_number := batch_number + 1;

      IF batch_number = 100
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
   END LOOP;

   COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_SUB_BAK" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   cursor c_service(pc_sub_id     NUMBER) is
       select  parent_service_id from (
          SELECT distinct parent_service_id
              FROM vas_service_full
              WHERE service_id in (
                 SELECT distinct service_id
                 FROM vas_sub_textbase_service
                 WHERE sub_id = pc_sub_id or sub_id = (
                       select chanel from vas_sub_service where id = pc_sub_id
               )
          )
       ) where ROWNUM = 1;
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportnextdate   VARCHAR2 (20);                          -- Report Next Date
   dayofweek varchar2(10);
   reportcommonid   NUMBER;                                               -- ID
   -- Service
   subserviceid     NUMBER;                                       -- Service ID
   subservicecode   VARCHAR2 (50);                              -- Service Code
   parentid         VARCHAR2 (50);                         -- Parent Service ID
   parentcode       VARCHAR2 (50);                       -- Parent Service Code
   recv             NUMBER;                                  -- Received Number
   telconame        VARCHAR2 (10);                                -- Telco Name
   smsvalid         NUMBER;
   -- Money
   sub_fee          NUMBER;                                          -- Sub fee
   num_fee          NUMBER;                                        -- Sub total
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;
-- Money + VAT                                   -- MO Total
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   reportnextdate := TO_CHAR (r_date + 1, 'dd/MM/yyyy');
   dayofweek := '''%' || TO_CHAR (r_date, 'D') || '%''';
   DBMS_OUTPUT.put_line (reportdate);
   querystr :=
         'SELECT vsn.SERVICE_NUMBER,
                 tl.SUB_SERVICE_ID,vss.sub_command,
                 COUNT(tl.id),SUM(tl.fee)
            FROM trans_log@link_aqreport tl, vas_sub_service vss, VAS_SERVICE_NUMBER vsn
           WHERE tl.CHARGED_TIME >= to_date('''
      || reportdate
      || ''', ''dd/MM/yyyy'')
      AND tl.CHARGED_TIME < to_date('''
      || reportnextdate
      || ''', ''dd/MM/yyyy'')'
      || ' AND tl.result = 0
      AND tl.sub_service_id = vss.id
      AND vss.service_number_id = vsn.service_number_id
      GROUP BY vsn.SERVICE_NUMBER,tl.SUB_SERVICE_ID,vss.sub_command';

   OPEN c_result FOR querystr;

   DBMS_OUTPUT.put_line ('Query Success');

   LOOP
      FETCH c_result
       INTO recv, subserviceid, subservicecode, smsvalid, moneytotal;

      EXIT WHEN c_result%NOTFOUND;
      DBMS_OUTPUT.put_line (recv || ':' || subserviceid);
      DBMS_OUTPUT.put_line (subservicecode);

      parentid := 0;
      for vr_service in c_service(subserviceid) loop
          parentid := vr_service.parent_service_id;
      end loop;

    if (parentid != 0) then

      SELECT service_code
        INTO parentcode
        FROM vas_service_full
       WHERE service_id = parentid;

         moneyvat := moneytotal / 1.1;

         -- Get reportCommonID
         SELECT MAX (ID)
           INTO reportcommonid
           FROM report_common
          WHERE receiver = recv
            AND service_id = subserviceid
            AND report_date >= TO_DATE (reportdate, 'dd/MM/yyyy')
            AND report_date < TO_DATE (reportnextdate, 'dd/MM/yyyy')
            AND telco_name = '1';

         IF reportcommonid IS NULL
         THEN
            INSERT INTO report_common
                        (receiver, sms_receive, sms_repair, sms_error,
                         sms_valid, money, money_vat,
                         report_date, telco_name,
                         service_code, service_id, parent_code, parent_id
                        )
                 VALUES (recv, smsvalid, 0, 0,
                         num_fee, moneytotal, moneyvat,
                         TO_DATE (reportdate, 'dd/MM/yyyy'), '1',
                         subservicecode, subserviceid, parentcode, parentid
                        );

            COMMIT;
         END IF;

    end if;

   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_SUB_FEE" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                             -- Report List
   querystr         VARCHAR2 (1000);                          -- Query String

   CURSOR c_service (pc_sub_id NUMBER)
   IS
      SELECT parent_service_id
        FROM (SELECT DISTINCT parent_service_id
                         FROM vas_service_full
                        WHERE service_id IN (
                                 SELECT DISTINCT service_id
                                            FROM vas_sub_textbase_service
                                           WHERE sub_id = pc_sub_id
                                              OR sub_id =
                                                       (SELECT chanel
                                                          FROM vas_sub_service
                                                         WHERE ID = pc_sub_id)))
       WHERE ROWNUM = 1;

   reportdate       VARCHAR2 (20);                              -- Report Date
   reportnextdate   VARCHAR2 (20);                         -- Report Next Date
   dayofweek        VARCHAR2 (10);
   reportcommonid   NUMBER;                                              -- ID
   -- Service
   subserviceid     NUMBER;                                      -- Service ID
   subservicecode   VARCHAR2 (50);                             -- Service Code
   parentid         VARCHAR2 (50);                        -- Parent Service ID
   parentcode       VARCHAR2 (50);                      -- Parent Service Code
   recv             NUMBER;                                 -- Received Number
   telconame        VARCHAR2 (10);                               -- Telco Name
   smsvalid         NUMBER;
   -- sub_fee          NUMBER;                                          -- Sub fee
   -- num_fee          NUMBER;                                        -- Sub total
   -- Money
   moneytotal       NUMBER;                                           -- Money
   moneyvat         NUMBER;                                     -- Money + VAT
   batch_number     NUMBER;
BEGIN
   reportdate := TO_CHAR (r_date, 'dd/MM/yyyy');
   reportnextdate := TO_CHAR (r_date + 1, 'dd/MM/yyyy');
   dayofweek := '''%' || TO_CHAR (r_date, 'D') || '%''';
   DBMS_OUTPUT.put_line (reportdate);
   querystr :=
         'SELECT vsn.SERVICE_NUMBER, 
                 tl.SUB_SERVICE_ID,vss.sub_command,
                 COUNT(tl.id),SUM(tl.fee)
            FROM trans_log@link_aqreport tl, vas_sub_service vss, VAS_SERVICE_NUMBER vsn
           WHERE tl.CHARGED_TIME >= to_date('''
      || reportdate
      || ''', ''dd/MM/yyyy'')
      AND tl.CHARGED_TIME < to_date('''
      || reportnextdate
      || ''', ''dd/MM/yyyy'')'
      || ' AND tl.result = 0
      AND tl.sub_service_id = vss.id
      AND vss.service_number_id = vsn.service_number_id
      GROUP BY vsn.SERVICE_NUMBER,tl.SUB_SERVICE_ID,vss.sub_command';
   batch_number := 0;

   OPEN c_result FOR querystr;

   DBMS_OUTPUT.put_line ('Query Success');

   LOOP
      FETCH c_result
       INTO recv, subserviceid, subservicecode, smsvalid, moneytotal;

      EXIT WHEN c_result%NOTFOUND;
      parentid := 0;

      FOR vr_service IN c_service (subserviceid)
      LOOP
         parentid := vr_service.parent_service_id;
      END LOOP;

      IF (parentid != 0)
      THEN
         SELECT service_code
           INTO parentcode
           FROM vas_service_full
          WHERE service_id = parentid;

         DBMS_OUTPUT.put_line (recv || '- ' || subserviceid);
         moneyvat := moneytotal / 1.1;

         INSERT INTO report_common_fee
                     (receiver, sms_receive, sms_repair, sms_error,
                      sms_valid, money, money_vat,
                      report_date, telco_name,
                      service_code, service_id, parent_code, parent_id
                     )
              VALUES (recv, 0, 0, 0,
                      smsvalid, moneytotal, moneyvat,
                      TO_DATE (reportdate, 'dd/MM/yyyy'), '1',
                      subservicecode, subserviceid, parentcode, parentid
                     );
      END IF;

      batch_number := batch_number + 1;

      IF batch_number = 100
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
   END LOOP;

   COMMIT;
   DBMS_OUTPUT.put_line ('finish');
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('fail' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_YEAR" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportyear       VARCHAR2 (4);                                -- Report Year
   reportcommonid   NUMBER;                                               -- ID
   -- MO, MT, SMS
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportyear := TO_CHAR (r_date, 'yyyy');
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT RECEIVER, SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM YEAR_COMMON_REPORT WHERE 
         TO_CHAR(REPORT_YEAR,''yyyy'') = '''
      || reportyear
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO recv, recvtotal, senttotal, smsrepair, smserror, smsvalid,
            moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      SELECT COUNT (DISTINCT (sender))
        INTO subcount
        FROM mo_table
       WHERE TO_CHAR (mo_table.mo_time, 'yyyy') = reportyear
         AND mo_table.receiver LIKE recvext;

      DBMS_OUTPUT.put_line (reportyear || '-' || recv || '-' || subcount);
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common_year
       WHERE receiver = recv AND TO_CHAR (report_year, 'yyyy') = reportyear;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_year
                     (receiver, sms_receive, sms_sent, sms_repair, sms_error,
                      sms_valid, money, money_vat, report_year,
                      sub_count, arpu
                     )
              VALUES (recv, recvtotal, senttotal, smsrepair, smserror,
                      smsvalid, moneytotal, moneyvat, TRUNC (r_date, 'yyyy'),
                      subcount, arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_year
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_COMMON_YEAR2" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportyear       VARCHAR2 (4);                                -- Report Year
   reportcommonid   NUMBER;                                               -- ID
   telcoid          NUMBER;
   telconame        VARCHAR2 (20);
   parentcode       VARCHAR2 (50);
   parentid         NUMBER;
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportyear := TO_CHAR (r_date, 'yyyy');
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT TELCO_ID, TELCO_NAME, PARENT_CODE, PARENT_ID,RECEIVER, 
         SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM YEAR_COMMON_REPORT2 WHERE 
         TO_CHAR(REPORT_YEAR,''yyyy'') = '''
      || reportyear
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO telcoid, telconame, parentcode, parentid, recv, recvtotal,
            senttotal, smsrepair, smserror, smsvalid, moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      IF telcoid = 0                                                  -- SMS8000
      THEN
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_mo
          WHERE TO_CHAR (vas_mo.mo_time, 'yyyy') = reportyear
            AND vas_mo.receiver LIKE recvext
            AND vas_mo.service_id IN (SELECT service_id
                                        FROM vas_service
                                       WHERE parent_service_id = parentid);
      ELSE                                                       -- SUBSCRIPTION
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_sub_mo
          WHERE TO_CHAR (vas_sub_mo.mo_time, 'yyyy') = reportyear
            AND vas_sub_mo.sender LIKE recvext
            AND vas_sub_mo.service_id IN (SELECT service_id
                                            FROM vas_service
                                           WHERE parent_service_id = parentid);
      END IF;

      DBMS_OUTPUT.put_line (   reportyear
                            || '-'
                            || telcoid
                            || '-'
                            || parentid
                            || '-'
                            || recv
                            || '-'
                            || subcount
                           );
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_common_year2
       WHERE receiver = recv
         AND TO_CHAR (report_year, 'yyyy') = reportyear
         AND telco_name = telconame
         AND parent_id = parentid;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_common_year2
                     (telco_id, telco_name, parent_id, parent_code, receiver,
                      sms_receive, sms_sent, sms_repair, sms_error, sms_valid,
                      money, money_vat, report_year, sub_count,
                      arpu
                     )
              VALUES (telcoid, telconame, parentid, parentcode, recv,
                      recvtotal, senttotal, smsrepair, smserror, smsvalid,
                      moneytotal, moneyvat, TRUNC (r_date, 'yyyy'), subcount,
                      arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_common_year2
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_DETAIL_DAILY" (report_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportdate       VARCHAR2 (20);                               -- Report Date
   reportcommonid   NUMBER;                                               -- ID
   telcoid          NUMBER;
   telconame        VARCHAR2 (20);
   parentcode       VARCHAR2 (50);
   parentid         NUMBER;
   servicecode      VARCHAR2 (50);
   serviceid        NUMBER;
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportdate := TO_CHAR (report_date, 'dd/MM/yyyy');
   DBMS_OUTPUT.put_line (reportdate);
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT TELCO_ID, TELCO_NAME, PARENT_CODE, PARENT_ID,SERVICE_CODE,SERVICE_ID,RECEIVER, 
         SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM DAILY_DETAIL_REPORT WHERE 
         TO_CHAR(REPORT_DATE,''dd/MM/yyyy'') = '''
      || reportdate
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO telcoid, telconame, parentcode, parentid, servicecode, serviceid,
            recv, recvtotal, senttotal, smsrepair, smserror, smsvalid,
            moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
      IF telcoid = 0                                                  -- SMS8000
      THEN
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_mo
          WHERE TO_CHAR (vas_mo.mo_time, 'dd/MM/yyyy') = reportdate
            AND vas_mo.receiver LIKE recvext
            AND vas_mo.service_id = serviceid;
      ELSE
         -- SUBSCRIPTION
         SELECT COUNT (DISTINCT (receiver))
           INTO subcount
           FROM vas_sub_mo
          WHERE TO_CHAR (vas_sub_mo.mo_time, 'dd/MM/yyyy') = reportdate
            AND vas_sub_mo.sender LIKE recvext
            AND vas_sub_mo.sub_service_id = serviceid;
      END IF;

      DBMS_OUTPUT.put_line (   recv
                            || '-'
                            || reportdate
                            || '-'
                            || serviceid
                            || '-'
                            || telconame
                            || '-'
                            || subcount
                           );
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT max(ID)
        INTO reportcommonid
        FROM report_detail_daily
       WHERE receiver = recv
         AND TO_CHAR (report_date, 'dd/MM/yyyy') = reportdate
         AND telco_id = telcoid
         AND service_id = serviceid;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_detail_daily
                     (telco_id, telco_name, parent_id, parent_code,
                      service_id, service_code, receiver, sms_receive,
                      sms_sent, sms_repair, sms_error, sms_valid, money,
                      money_vat, report_date, sub_count,
                      arpu
                     )
              VALUES (telcoid, telconame, parentid, parentcode,
                      serviceid, servicecode, recv, recvtotal,
                      senttotal, smsrepair, smserror, smsvalid, moneytotal,
                      moneyvat, TO_DATE (reportdate, 'dd/MM/yyyy'), subcount,
                      arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_detail_daily
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_DETAIL_MONTH" (r_date IN DATE)
IS
   -- Variables
   c_result         sys_refcursor;                               -- Report List
   querystr         VARCHAR2 (1000);                            -- Query String
   reportmonth      VARCHAR2 (6);                                -- Report Date
   reportcommonid   NUMBER;                                               -- ID
   telcoid          NUMBER;
   telconame        VARCHAR2 (20);
   parentcode       VARCHAR2 (50);
   parentid         NUMBER;
   servicecode      VARCHAR2 (50);
   serviceid        NUMBER;
   recv             VARCHAR2 (10);
   recvext          VARCHAR2 (10);
   recvtotal        NUMBER;                                         -- MO Total
   senttotal        NUMBER;                                         -- MT Total
   smsrepair        NUMBER;                               -- Repaired SMS Total
   smserror         NUMBER;                                  -- Error SMS Total
   smsvalid         NUMBER;                                  -- Valid SMS Total
   subcount         NUMBER;
   -- Money
   moneytotal       NUMBER;                                            -- Money
   moneyvat         NUMBER;                                      -- Money + VAT
   arpunum          NUMBER;
BEGIN
   reportmonth := TO_CHAR (r_date, 'yyyyMM');
   -- Count MO Total, MT Total based in receiver,service_id
   querystr :=
         'SELECT TELCO_ID, TELCO_NAME, PARENT_CODE, PARENT_ID,SERVICE_CODE,SERVICE_ID,RECEIVER, 
         SMS_RECEIVE, SMS_SENT, SMS_REPAIR, SMS_ERROR, 
         SMS_VALID, MONEY, MONEY_VAT FROM MONTH_DETAIL_REPORT WHERE 
         TO_CHAR(REPORT_MONTH,''yyyyMM'') = '''
      || reportmonth
      || '''';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO telcoid, telconame, parentcode, parentid, servicecode, serviceid,
            recv, recvtotal, senttotal, smsrepair, smserror, smsvalid,
            moneytotal, moneyvat;

      EXIT WHEN c_result%NOTFOUND;

      IF recv = '5x55'
      THEN
         recvext := '5_55';
      ELSE
         recvext := recv;
      END IF;

      -- Sub count
       -- Sub count
      IF telcoid = 0                                                  -- SMS8000
      THEN
         SELECT COUNT (DISTINCT (sender))
           INTO subcount
           FROM vas_mo
          WHERE TO_CHAR (vas_mo.mo_time, 'yyyyMM') = reportmonth
            AND vas_mo.receiver LIKE recvext
            AND vas_mo.service_id = serviceid;
      ELSE
         -- SUBSCRIPTION
         SELECT COUNT (DISTINCT (receiver))
           INTO subcount
           FROM vas_sub_mo
          WHERE TO_CHAR (vas_sub_mo.mo_time, 'yyyyMM') = reportmonth
            AND vas_sub_mo.sender LIKE recvext
            AND vas_sub_mo.sub_service_id = serviceid;
      END IF;

      DBMS_OUTPUT.put_line (   recv
                            || '-'
                            || reportmonth
                            || '-'
                            || serviceid
                            || '-'
                            || telconame
                            || '-'
                            || subcount
                           );
      arpunum := moneytotal / subcount;

      -- Get reportCommonID
      SELECT MAX (ID)
        INTO reportcommonid
        FROM report_detail_month
       WHERE receiver = recv
         AND TO_CHAR (report_month, 'yyyyMM') = reportmonth
         AND telco_id = telcoid
         AND service_id = serviceid;

      IF reportcommonid IS NULL
      THEN
         INSERT INTO report_detail_month
                     (telco_id, telco_name, parent_id, parent_code,
                      service_id, service_code, receiver, sms_receive,
                      sms_sent, sms_repair, sms_error, sms_valid, money,
                      money_vat, report_month, sub_count, arpu
                     )
              VALUES (telcoid, telconame, parentid, parentcode,
                      serviceid, servicecode, recv, recvtotal,
                      senttotal, smsrepair, smserror, smsvalid, moneytotal,
                      moneyvat, TRUNC (r_date, 'MM'), subcount, arpunum
                     );

         COMMIT;
      ELSE
         UPDATE report_detail_month
            SET sms_receive = recvtotal,
                sms_sent = senttotal,
                sms_repair = smsrepair,
                sms_error = smserror,
                sms_valid = smsvalid,
                money = moneytotal,
                money_vat = moneyvat,
                sub_count = subcount,
                arpu = arpunum
          WHERE ID = reportcommonid;

         COMMIT;
      END IF;
   END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_USER_GROUP_SMS" -- PROC FOR TEXT_BASE
IS
--------------------------------------------------------------------------------
   parent_result   sys_refcursor;                                  -- Data List
   number_result   sys_refcursor;                                  -- Data List
   parent_query    VARCHAR2 (1000);                               -- SQL String
   number_query    VARCHAR2 (1000);                               -- SQL String
--------------------------------------------------------------------------------
   r_date          DATE;                                         -- System Date
   now             DATE;                                         -- System Date
   nextdate        DATE;                                           -- Next Date
   fdcm            DATE;                         -- First Date of Current Month
   fdpm            DATE;                        -- First Date of Previous Month
   rpid            NUMBER;                                    -- Report User ID
--------------------------------------------------------------------------------
   parentid        NUMBER;                                 -- Parent Service ID
   parentcode      VARCHAR2 (30);
   recv            VARCHAR2 (10);                            -- Receiver Number
   recvno          VARCHAR2 (10);                         -- Receiver Number No
--------------------------------------------------------------------------------
   newuser         NUMBER;                                    -- Total New User
   outuser         NUMBER;                                    -- Total Out User
   olduser         NUMBER;                                    -- Total Old User
   totatnum        NUMBER;                                        -- Total User
--------------------------------------------------------------------------------
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT SYSDATE
     INTO now
     FROM DUAL;

   now := TRUNC (SYSDATE, 'dd');
   nextdate := TRUNC (now + 1, 'dd');
   fdcm := TRUNC (now, 'MM');
   fdpm := TRUNC (fdcm - 1, 'MM');
   -- Count MO Total, MT Total based in service_id,receiver
   parent_query :=
      'select service_id,service_code from vas_service where parent_service_id = 0';
   number_query :=
      'select service_number,service_number as serviceno from vas_service_number where service_number not like ''5_55'' union select ''5_55'' as service_number,''5x55'' as serviceno from dual';

   OPEN parent_result FOR parent_query;

   LOOP
      FETCH parent_result
       INTO parentid, parentcode;

      EXIT WHEN parent_result%NOTFOUND;

      OPEN number_result FOR number_query;

      LOOP
         FETCH number_result
          INTO recv, recvno;

         EXIT WHEN number_result%NOTFOUND;
         DBMS_OUTPUT.put_line (parentid || recvno);

         -- Count New User
         SELECT COUNT (DISTINCT sender)
           INTO newuser
           FROM vas_mo
          WHERE sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender NOT IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Out User
         SELECT COUNT (DISTINCT sender)
           INTO outuser
           FROM vas_mo
          WHERE sender NOT IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Old User
         SELECT COUNT (DISTINCT sender)
           INTO olduser
           FROM vas_mo
          WHERE sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Total
         totatnum := newuser + olduser;

         IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0))
         THEN
            -- Count Report in nextdateent Month
            SELECT MAX (ID)
              INTO rpid
              FROM report_user_group
             WHERE parent_id = parentid
               AND receiver LIKE recv
               AND report_date = now
               AND telco_name = '0';

            -- If id is null, Insert to DB
            IF rpid IS NULL
            THEN
               INSERT INTO report_user_group
                           (receiver, report_date, new_user, out_user,
                            old_user, telco_name, total_num, parent_code,
                            parent_id
                           )
                    VALUES (recvno, now, newuser, outuser,
                            olduser, '0', totatnum, parentcode,
                            parentid
                           );
            -- If id is not null, Update to DB
            ELSE
               UPDATE report_user_group
                  SET new_user = newuser,
                      out_user = outuser,
                      old_user = olduser,
                      total_num = totatnum
                WHERE ID = rpid;
            END IF;
         END IF;
      END LOOP;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_USER_GROUP_SMS... SUCCESS', r_date, SYSDATE
               );

   DBMS_OUTPUT.put_line (' ');
   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_USER_GROUP_SMS... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_USER_GROUP_SUB" -- PROC FOR SUBSCRIPTION
IS
--------------------------------------------------------------------------------
   parent_result   sys_refcursor;                                  -- Data List
   number_result   sys_refcursor;                                  -- Data List
   parent_query    VARCHAR2 (1000);                               -- SQL String
   number_query    VARCHAR2 (1000);                               -- SQL String
--------------------------------------------------------------------------------
   r_date          DATE;                                         -- System Date
   now             DATE;                                         -- System Date
   nextdate        DATE;                                           -- Next Date
   fdcm            DATE;                         -- First Date of Current Month
   fdpm            DATE;                        -- First Date of Previous Month
   rpid            NUMBER;                                    -- Report User ID
--------------------------------------------------------------------------------
   parentid        NUMBER;                                 -- Parent Service ID
   parentcode      VARCHAR2 (30);
   recv            VARCHAR2 (10);                            -- Receiver Number
   recvno          VARCHAR2 (10);                         -- Receiver Number No
--------------------------------------------------------------------------------
   newuser         NUMBER;                                    -- Total New User
   outuser         NUMBER;                                    -- Total Out User
   olduser         NUMBER;                                    -- Total Old User
   totalnum        NUMBER;                                        -- Total User
--------------------------------------------------------------------------------
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT SYSDATE
     INTO now
     FROM DUAL;

   now := TRUNC (SYSDATE, 'dd');
   nextdate := TRUNC (now + 1, 'dd');
   fdcm := TRUNC (now, 'MM');
   fdpm := TRUNC (fdcm - 1, 'MM');
   -- Count MO Total, MT Total based in service_id,receiver
   parent_query :=
      'select service_id,service_code from vas_service where parent_service_id = 0';
   number_query :=
      'select service_number,service_number as serviceno from vas_service_number where service_number not like ''5_55'' union select ''5_55'' as service_number,''5x55'' as serviceno from dual';

   OPEN parent_result FOR parent_query;

   LOOP
      FETCH parent_result
       INTO parentid, parentcode;

      EXIT WHEN parent_result%NOTFOUND;

      OPEN number_result FOR number_query;

      LOOP
         FETCH number_result
          INTO recv, recvno;

         EXIT WHEN number_result%NOTFOUND;
         DBMS_OUTPUT.put_line (parentid || recvno);

         -- Count New User
         SELECT COUNT (DISTINCT receiver)
           INTO newuser
           FROM vas_sub_mo
          WHERE receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver NOT IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Out User
         SELECT COUNT (DISTINCT receiver)
           INTO outuser
           FROM vas_sub_mo
          WHERE receiver NOT IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Old User
         SELECT COUNT (DISTINCT receiver)
           INTO olduser
           FROM vas_sub_mo
          WHERE receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND service_id IN (SELECT service_id
                                           FROM vas_service
                                          WHERE parent_service_id = parentid)
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Total
         totalnum := newuser + olduser;
         DBMS_OUTPUT.put_line (   newuser
                               || '-'
                               || outuser
                               || '-'
                               || olduser
                               || '-'
                               || totalnum
                              );

         IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0))
         THEN
            -- Count Report in nextdateent Month
            SELECT MAX (ID)
              INTO rpid
              FROM report_user_group
             WHERE parent_id = parentid
               AND receiver LIKE recv
               AND TRUNC (report_date) = TRUNC (now)
               AND telco_name = 1;

            -- If id is null, Insert to DB
            IF rpid IS NULL
            THEN
               INSERT INTO report_user_group
                           (receiver, report_date, new_user, out_user,
                            old_user, telco_name, total_num, parent_code,
                            parent_id
                           )
                    VALUES (recvno, now, newuser, outuser,
                            olduser, '1', totalnum, parentcode,
                            parentid
                           );
            -- If id is not null, Update to DB
            ELSE
               UPDATE report_user_group
                  SET new_user = newuser,
                      out_user = outuser,
                      old_user = olduser,
                      total_num = totalnum
                WHERE ID = rpid;
            END IF;
         END IF;
      END LOOP;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_USER_GROUP_SUB... SUCCESS', r_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_USER_GROUP_SUB... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_USER_SMS" -- PROC FOR TEXTBASE
IS
--------------------------------------------------------------------------------
   service_result   sys_refcursor;                                 -- Data List
   number_result    sys_refcursor;                                 -- Data List
   query_service    VARCHAR2 (1000);                              -- SQL String
   query_number     VARCHAR2 (1000);                              -- SQL String
--------------------------------------------------------------------------------
   r_date           DATE;                                        -- System Date
   now              DATE;                                        -- System Date
   nextdate         DATE;                                          -- Next Date
   fdcm             DATE;                        -- First Date of Current Month
   fdpm             DATE;                       -- First Date of Previous Month
   rpid             NUMBER;                                   -- Report User ID
--------------------------------------------------------------------------------
   serviceid        NUMBER;                                       -- Service ID
   servicecode      VARCHAR2 (30);                              -- Service Code
   parentid         NUMBER;                                -- Parent Service ID
   parentcode       VARCHAR2 (30);
   recv             VARCHAR2 (10);                           -- Receiver Number
   recvno           VARCHAR2 (10);                        -- Receiver Number No
--------------------------------------------------------------------------------
   newuser          NUMBER;                                   -- Total New User
   outuser          NUMBER;                                   -- Total Out User
   olduser          NUMBER;                                   -- Total Old User
   totalnum         NUMBER;                                       -- Total User
--------------------------------------------------------------------------------
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT SYSDATE
     INTO now
     FROM DUAL;

   now := TRUNC (SYSDATE, 'dd');
   nextdate := TRUNC (now + 1, 'dd');
   fdcm := TRUNC (now, 'MM');
   fdpm := TRUNC (fdcm - 1, 'MM');
   query_service :=
      'select service_id,service_code,parent_service_id from vas_service where parent_service_id > 0';
   query_number :=
      'select service_number,service_number as serviceno from vas_service_number where service_number not like ''5_55'' union select ''5_55'' as service_number,''5x55'' as serviceno from dual';

   OPEN service_result FOR query_service;

   LOOP
      FETCH service_result
       INTO serviceid, servicecode, parentid;

      EXIT WHEN service_result%NOTFOUND;

      SELECT service_code
        INTO parentcode
        FROM vas_service
       WHERE service_id = parentid;

      OPEN number_result FOR query_number;

      LOOP
         FETCH number_result
          INTO recv, recvno;

         EXIT WHEN number_result%NOTFOUND;
         DBMS_OUTPUT.put_line (serviceid || '-' || recvno);

         -- Count New User
         SELECT COUNT (DISTINCT sender)
           INTO newuser
           FROM vas_mo
          WHERE sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender NOT IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Out User
         SELECT COUNT (DISTINCT sender)
           INTO outuser
           FROM vas_mo
          WHERE sender NOT IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Old User
         SELECT COUNT (DISTINCT sender)
           INTO olduser
           FROM vas_mo
          WHERE sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND sender IN (
                   SELECT sender
                     FROM vas_mo
                    WHERE receiver LIKE recv
                      AND service_id = serviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Total
         totalnum := newuser + olduser;

         IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0))
         THEN
            -- Count Report in nextdateent Month
            SELECT MAX (ID)
              INTO rpid
              FROM report_user
             WHERE service_id = serviceid
               AND receiver LIKE recv
               AND report_date = now
               AND telco_name = '0';

            -- If id is null, Insert to DB
            IF rpid IS NULL
            THEN
               INSERT INTO report_user
                           (receiver, report_date, new_user, out_user,
                            old_user, telco_name, total_num, service_code,
                            service_id, parent_code, parent_id
                           )
                    VALUES (recvno, now, newuser, outuser,
                            olduser, '0', totalnum, servicecode,
                            serviceid, parentcode, parentid
                           );
            -- If id is not null, Update to DB
            ELSE
               UPDATE report_user
                  SET new_user = newuser,
                      out_user = outuser,
                      old_user = olduser,
                      total_num = totalnum
                WHERE ID = rpid;
            END IF;
         END IF;
      END LOOP;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_USER_SMS... SUCCESS', r_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_USER_SMS... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_USER_SUB" -- PROC FOR SUBSCRIPTION
IS
--------------------------------------------------------------------------------
   service_result   sys_refcursor;                                 -- Data List
   number_result    sys_refcursor;                                 -- Data List
   query_service    VARCHAR2 (1000);                              -- SQL String
   query_number     VARCHAR2 (1000);                              -- SQL String
--------------------------------------------------------------------------------
   r_date           DATE;                                        -- System Date
   now              DATE;                                        -- System Date
   nextdate         DATE;                                          -- Next Date
   fdcm             DATE;                        -- First Date of Current Month
   fdpm             DATE;                       -- First Date of Previous Month
   rpid             NUMBER;                                   -- Report User ID
--------------------------------------------------------------------------------
   subserviceid     NUMBER;                                       -- Service ID
   subservicecode   VARCHAR2 (30);                              -- Service Code
   parentid         NUMBER;                                -- Parent Service ID
   parentcode       VARCHAR2 (30);
   recv             VARCHAR2 (10);                           -- Receiver Number
   recvno           VARCHAR2 (10);                           -- Receiver Number
--------------------------------------------------------------------------------
   newuser          NUMBER;                                   -- Total New User
   outuser          NUMBER;                                   -- Total Out User
   olduser          NUMBER;                                   -- Total Old User
   totalnum         NUMBER;                                       -- Total User
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT SYSDATE
     INTO now
     FROM DUAL;

   now := TRUNC (SYSDATE, 'dd');
   nextdate := TRUNC (now + 1, 'dd');
   fdcm := TRUNC (now, 'MM');
   fdpm := TRUNC (fdcm - 1, 'MM');
   query_service := 'select id,sub_command from vas_sub_service';
   query_number :=
      'select service_number,service_number as serviceno from vas_service_number where service_number not like ''5_55'' union select ''5_55'' as service_number,''5x55'' as serviceno from dual';

   OPEN service_result FOR query_service;

   LOOP
      FETCH service_result
       INTO subserviceid, subservicecode;

      EXIT WHEN service_result%NOTFOUND;
      DBMS_OUTPUT.put_line (subserviceid);

      -- Get Parent Service ID, Parent Service Code
      SELECT service_id, service_code
        INTO parentid, parentcode
        FROM vas_service
       WHERE service_id =
                (SELECT parent_service_id
                   FROM vas_service
                  WHERE service_id =
                                   (SELECT service_id
                                      FROM vas_sub_textbase_service
                                     WHERE sub_id = subserviceid AND ROWNUM = 1));

      DBMS_OUTPUT.put_line (parentid || '-' || parentcode);

      OPEN number_result FOR query_number;

      LOOP
         FETCH number_result
          INTO recv, recvno;

         EXIT WHEN number_result%NOTFOUND;
         DBMS_OUTPUT.put_line (subserviceid || '-' || recvno);

         -- Count New User
         SELECT COUNT (DISTINCT receiver)
           INTO newuser
           FROM vas_sub_mo
          WHERE receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver NOT IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Out User
         SELECT COUNT (DISTINCT receiver)
           INTO outuser
           FROM vas_sub_mo
          WHERE receiver NOT IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Old User
         SELECT COUNT (DISTINCT receiver)
           INTO olduser
           FROM vas_sub_mo
          WHERE receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdcm
                      AND mo_time < nextdate)
            AND receiver IN (
                   SELECT receiver
                     FROM vas_sub_mo
                    WHERE sender LIKE recv
                      AND sub_service_id = subserviceid
                      AND mo_time >= fdpm
                      AND mo_time < fdcm);

         -- Count Total
         totalnum := newuser + olduser;

         IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0))
         THEN
            -- Count Report in nextdateent Month
            SELECT MAX (ID)
              INTO rpid
              FROM report_user
             WHERE service_id = subserviceid
               AND receiver LIKE recv
               AND TRUNC (report_date) = TRUNC (now)
               AND telco_name = '1';

            -- If id is null, Insert to DB
            IF rpid IS NULL
            THEN
               INSERT INTO report_user
                           (receiver, report_date, new_user, out_user,
                            old_user, telco_name, total_num, service_code,
                            service_id, parent_code, parent_id
                           )
                    VALUES (recvno, now, newuser, outuser,
                            olduser, '1', totalnum, subservicecode,
                            subserviceid, parentcode, parentid
                           );
            -- If id is not null, Update to DB
            ELSE
               UPDATE report_user
                  SET new_user = newuser,
                      out_user = outuser,
                      old_user = olduser,
                      total_num = totalnum
                WHERE ID = rpid;
            END IF;
         END IF;
      END LOOP;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_USER_SUB... SUCCESS', r_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_USER_SUB... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_REPORT_USER_TOTAL" 
IS
   c_result   sys_refcursor;                                       -- Data List
   querystr   VARCHAR2 (1000);                                    -- SQL String
   recv       VARCHAR2 (10);                                 -- Receiver Number
   recvno     VARCHAR2 (10);                              -- Receiver Number No
   rpid       NUMBER;                                         -- Report User ID
   r_date     DATE;                                              -- System Date
   now        DATE;                                              -- System Date
   fdcm       DATE;                              -- First Date of Current Month
   fdpm       DATE;                             -- First Date of Previous Month
   newuser    NUMBER;                                         -- Total New User
   outuser    NUMBER;                                         -- Total Out User
   olduser    NUMBER;                                         -- Total Old User
   totalnum   NUMBER;                                             -- Total User
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT SYSDATE
     INTO now
     FROM DUAL;

   fdcm := TRUNC (now, 'MM');
   fdpm := TRUNC (fdcm - 1, 'MM');
   querystr :=
      'select service_number,service_number as serviceno from vas_service_number where service_number not like ''5_55'' union select ''5_55'' as service_number,''5x55'' as serviceno from dual';

   OPEN c_result FOR querystr;

   LOOP
      FETCH c_result
       INTO recv, recvno;

      EXIT WHEN c_result%NOTFOUND;
      DBMS_OUTPUT.put_line ('PROCESS NUMBER: ' || recv);

      -- Count New User
      SELECT COUNT (DISTINCT sender)
        INTO newuser
        FROM mo_table
       WHERE sender IN (
                  SELECT sender
                    FROM mo_table
                   WHERE receiver LIKE recv AND mo_time >= fdcm
                         AND mo_time < now)
         AND sender NOT IN (
                 SELECT sender
                   FROM mo_table
                  WHERE receiver LIKE recv AND mo_time >= fdpm
                        AND mo_time < fdcm);

      -- Count Out User
      SELECT COUNT (DISTINCT sender)
        INTO outuser
        FROM mo_table
       WHERE sender NOT IN (
                  SELECT sender
                    FROM mo_table
                   WHERE receiver LIKE recv AND mo_time >= fdcm
                         AND mo_time < now)
         AND sender IN (
                 SELECT sender
                   FROM mo_table
                  WHERE receiver LIKE recv AND mo_time >= fdpm
                        AND mo_time < fdcm);

      -- Count Old User
      SELECT COUNT (DISTINCT sender)
        INTO olduser
        FROM mo_table
       WHERE sender IN (
                  SELECT sender
                    FROM mo_table
                   WHERE receiver LIKE recv AND mo_time >= fdcm
                         AND mo_time < now)
         AND sender IN (
                 SELECT sender
                   FROM mo_table
                  WHERE receiver LIKE recv AND mo_time >= fdpm
                        AND mo_time < fdcm);

      -- Count Total
      totalnum := newuser + olduser;

      IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0))
      THEN
         -- Count Report in nextdateent Month
         SELECT MAX (ID)
           INTO rpid
           FROM report_user_total
          WHERE receiver LIKE recv AND report_month = TRUNC (now, 'MM');

         -- If id is null, Insert to DB
         IF rpid IS NULL
         THEN
            INSERT INTO report_user_total
                        (receiver, report_month, new_user, out_user, old_user,
                         total_num
                        )
                 VALUES (recvno, TRUNC (now, 'MM'), newuser, outuser, olduser,
                         totalnum
                        );
         -- If id is not null, Update to DB
         ELSE
            UPDATE report_user_total
               SET new_user = newuser,
                   out_user = outuser,
                   old_user = olduser,
                   total_num = totalnum
             WHERE ID = rpid;
         END IF;
      END IF;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date
               )
        VALUES ('PROC_REPORT_USER_TOTAL... SUCCESS', r_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      INSERT INTO report_log
                  (description, begin_date, end_date
                  )
           VALUES ('PROC_REPORT_USER_TOTAL... FAILURE', r_date, SYSDATE
                  );

      COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_RESET_SEQUENCE" (phone_number IN VARCHAR2, RESULT OUT NUMBER)
IS
   sqlquery   VARCHAR (1000);
   c_result   sys_refcursor;
BEGIN
   sqlquery :=
         'select count(*) from vas_prefix a
  /*where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 */
     where (instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vtt))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vnp))=1 OR
       instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.vsm))=1 OR
        instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.evn))=1 OR
      instr('
      || phone_number
      || ',CONCAT(a.prefix_code,a.sfone ))=1
       )  ';

   dbms_output.put_line(sqlquery);
   OPEN c_result FOR sqlquery;

   FETCH c_result
    INTO RESULT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_SYNC_GW_MT_TMP" (p_error OUT VARCHAR2)
IS
  cursor c_gw_mt_tmp is
    select a.SESSIONID, a.SUM_MT, a.SENDER, a.RECEIVER,
         a.Service_Rtn, a.SERVICE, a.MESSAGE, a.MT_TIME, a.GATEWAY, a.ID
     from gw_mt a, (select * from gw_mt_id_tmp where rownum <= 50000) b
     where a.id = b.id;

  v_id   NUMBER(10);
  v_sessionid NVARCHAR2(30);
  v_gateway VARCHAR2(30);
  v_summt NUMBER(38);
  v_sender NVARCHAR2(14);
  v_receiver NVARCHAR2(14);
  v_service NVARCHAR2(30);
  v_Service_Rtn NUMBER(38);
  v_message NVARCHAR2(800);
  v_mttime TIMESTAMP(6);

  i           integer;
BEGIN
  i := 0;
  for vr_gw_mt_tmp in c_gw_mt_tmp loop
   begin
     v_id := vr_gw_mt_tmp.id;
     v_sessionid := vr_gw_mt_tmp.sessionid;
     v_gateway := vr_gw_mt_tmp.gateway;
     v_summt := vr_gw_mt_tmp.sum_mt;
     v_sender := vr_gw_mt_tmp.sender;
     v_receiver := vr_gw_mt_tmp.receiver;
     v_Service_Rtn := vr_gw_mt_tmp.Service_Rtn;
     v_service := vr_gw_mt_tmp.service;
     v_message := vr_gw_mt_tmp.MESSAGE;
     v_mttime := vr_gw_mt_tmp.mt_time;

     insert into gw_mt_tmp
     (SESSIONID, SUM_MT, SENDER, RECEIVER, SERVICE, SERVICE_RTN, MESSAGE, MT_TIME, GATEWAY, ID)
     values
     (v_sessionid, v_summt, v_sender, v_receiver, v_service, v_Service_Rtn, v_message, v_mttime, v_gateway, v_id);

     delete gw_mt_id_tmp t where t.id = v_id;

     i := i + 1;
     if i mod 1000 = 0 then
        commit;
        i := 0;
     end if;

      EXCEPTION
        WHEN DUP_VAL_ON_INDEX then
          null;
   end;
  end loop;
  commit;
  p_error := 'OK';
  DBMS_OUTPUT.put_line ('finish gw_mt_tmp');
  EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := 'Error ' || SQLERRM;
      DBMS_OUTPUT.put_line (p_error);
END;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_SYNC_MT_SMS" (p_error OUT VARCHAR2)
IS
   r_date   DATE;
   min_date DATE;

   cursor c_mt_report_sms(p_date DATE) is
     SELECT gw_mt_sms_tmp.ID, gw_mt_sms_tmp.sender, gw_mt_sms_tmp.receiver, mo.service_id,
                     TO_CHAR (mo.MESSAGE) AS sms_content,
                     TO_CHAR (mo.command) AS command, gw_mt_sms_tmp.MESSAGE,
                     gw_mt_sms_tmp.mt_time, '0' AS telco_id, 'TEXTBASE' AS telco_name,
                     gw_mt_sms_tmp.sum_mt,
                     CASE
                        WHEN charge.status = 1
                           THEN 1
                        WHEN cdr.status = 1      -- Charge success
                          AND gw_mt_sms_tmp.SERVICE_RTN = 1
                           THEN 1
                        ELSE 0           -- Not charge or charge fail
                     END AS status
                FROM gw_mt_sms_tmp JOIN (select * from vas_mo where vas_mo.mo_time >= trunc(p_date)) mo
                     ON (    gw_mt_sms_tmp.sessionid = mo.sessionid
                         AND gw_mt_sms_tmp.gateway = mo.gateway
                        )
                     LEFT JOIN (select * from gw_cdr where gw_cdr.mttime >= trunc(p_date)) cdr
                     ON (    TO_CHAR (gw_mt_sms_tmp.sessionid) =
                                                      TO_CHAR (cdr.sessionid)
                         AND gw_mt_sms_tmp.gateway = cdr.gateway
                        )
                     LEFT JOIN (select * from vas_mo_charge where vas_mo_charge.charge_time >= trunc(p_date)) charge
                     ON (    TO_CHAR (gw_mt_sms_tmp.sessionid) =
                                              TO_CHAR (charge.sesssionid)
                         AND gw_mt_sms_tmp.gateway = charge.gateway
                        )
               WHERE LOWER (gw_mt_sms_tmp.service) <> 'vaspsub';

  v_id   NUMBER(10);
  v_sender NVARCHAR2(14);
  v_receiver NVARCHAR2(14);
  v_serviceid NUMBER(10);
  v_smscontent VARCHAR2(800);
  v_command VARCHAR2(50);
  v_message NVARCHAR2(800);
  v_mttime TIMESTAMP(6);
  v_telcoid VARCHAR2(1);
  v_telconame VARCHAR2(20);
  v_summt NUMBER(38);
  v_status NUMBER(38);

  i           integer;
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   SELECT min(gw_mt_sms_tmp.mt_time)
     INTO min_date
     FROM gw_mt_sms_tmp;

   DBMS_OUTPUT.put_line ('BEGIN SYNC TEXT');

  i := 0;
  for vr_mt_report_sms in c_mt_report_sms(min_date) loop
   begin
     v_id := vr_mt_report_sms.id;
     v_sender := vr_mt_report_sms.sender;
     v_receiver := vr_mt_report_sms.receiver;
     v_serviceid := vr_mt_report_sms.service_id;
     v_smscontent := vr_mt_report_sms.sms_content;
     v_command := vr_mt_report_sms.command;
     v_message := vr_mt_report_sms.MESSAGE;
     v_mttime := vr_mt_report_sms.mt_time;
     v_telcoid := vr_mt_report_sms.telco_id;
     v_telconame := vr_mt_report_sms.telco_name;
     v_summt := vr_mt_report_sms.sum_mt;
     v_status := vr_mt_report_sms.status;

     INSERT INTO mt_table_tmp
                 (ID, sender, receiver, service_id, sms_content, command, MESSAGE,
                  mt_time, telco_id, telco_name, sum_mt, status)
        VALUES
        (v_id,v_sender,v_receiver,v_serviceid,v_smscontent,v_command,
        v_message,v_mttime,v_telcoid,v_telconame,v_summt,v_status);

     delete gw_mt_sms_tmp where id = v_id;

     i := i + 1;
     if i mod 1000 = 0 then
        commit;
        i := 0;
     end if;

      exception
        when DUP_VAL_ON_INDEX then
        null;
   end;
  end loop;
  commit;

   DBMS_OUTPUT.put_line ('TEXT SUCCESS');

   --begin clear tmp
   delete gw_mt_sms_tmp where mt_time < r_date-1;
   commit;
   --end clear tmp

   INSERT INTO report_log
               (description, begin_date, end_date, status
               )
        VALUES ('proc_sync_mt_sms', r_date, SYSDATE, 'OK'
               );

   COMMIT;

EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := 'Error ' || SQLERRM;

      INSERT INTO report_log
                  (description, begin_date, end_date, status
                  )
           VALUES ('proc_sync_mt_sms', r_date, SYSDATE, p_error
                  );

      COMMIT;
END;
-- Procedure;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_SYNC_VAS_MO_TMP" (
   max_id    IN       NUMBER,
   min_id    IN       NUMBER,
   p_error   OUT      VARCHAR2
)
IS
   batch_number   NUMBER;

   CURSOR vas_mo_cursor
   IS
      SELECT sessionid, supply, sender, receiver, service_id, MESSAGE, mo_time,
             command, status, service, gateway, ID
        FROM vas_mo_tmp
       WHERE tmp_id <= max_id AND tmp_id >= min_id;
BEGIN
   batch_number := 0;
   FOR v_vas_mo_cursor IN vas_mo_cursor ()
   LOOP
    BEGIN
      INSERT INTO vas_mo
                  (sessionid, supply,
                   sender, receiver,
                   service_id, MESSAGE,
                   mo_time, command,
                   status, service,
                   gateway, ID
                  )
           VALUES (v_vas_mo_cursor.sessionid, v_vas_mo_cursor.supply,
                   v_vas_mo_cursor.sender, v_vas_mo_cursor.receiver,
                   v_vas_mo_cursor.service_id, v_vas_mo_cursor.MESSAGE,
                   v_vas_mo_cursor.mo_time, v_vas_mo_cursor.command,
                   v_vas_mo_cursor.status, v_vas_mo_cursor.service,
                   v_vas_mo_cursor.gateway, v_vas_mo_cursor.ID
                  );

      INSERT INTO mo_table
                  (sender,
                   service_id,
                   MESSAGE,
                   command,
                   receiver, mo_time,
                   telco_name, telco_id
                  )
           VALUES (TO_CHAR (v_vas_mo_cursor.sender),
                   v_vas_mo_cursor.service_id,
                   TO_CHAR (v_vas_mo_cursor.MESSAGE),
                   TO_CHAR (v_vas_mo_cursor.command),
                   TO_CHAR (v_vas_mo_cursor.receiver), v_vas_mo_cursor.mo_time,
                   'TEXTBASE', '0'
                  );

      batch_number := batch_number + 1;

      IF batch_number = 1000
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
      
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX then
          null;
    END;
   END LOOP;

   COMMIT;

   DELETE FROM vas_mo_tmp
         WHERE tmp_id <= max_id AND tmp_id >= min_id;

   COMMIT;
   DBMS_OUTPUT.put_line ('finish');
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line ('fail' || SQLERRM);
END;                                                                -- Procedure;

CREATE OR REPLACE PROCEDURE SMS8000."PROC_TEST" 
   IS

     v_array mytabletype;
   BEGIN
      v_array := test('0.1.03.04.234');
     FOR i IN 1 .. v_array.COUNT LOOP
   	 DBMS_OUTPUT.put_line(v_array(i));
    END LOOP;
    DBMS_OUTPUT.put_line(v_array.COUNT);
  END;

CREATE OR REPLACE PROCEDURE SMS8000.PR_CONVERT_SUB_SERVICE(
    OLD_NAME         IN VARCHAR2,
    NEW_NAME         IN VARCHAR2,
    SUB_SERVICE_COMMAND IN VARCHAR2,
    REG_TIME         IN VARCHAR2 )
IS
  V_TABLE_SRC         VARCHAR2(100);
  V_TABLE_DEST        VARCHAR2(100);
  DATE_UPCODE         VARCHAR2(20);
  SUB_SERVICE_ID_DEST NUMBER;
  QUERY_UPDATE        VARCHAR2 (2000);
  QUERY_INSERT        VARCHAR2 (2000);
  QUERY_CANCEL        VARCHAR2 (2000);
BEGIN
  DATE_UPCODE := TO_CHAR (SYSDATE, 'yyyymmdd');
  DBMS_OUTPUT.PUT_LINE ('date_upcode:' || DATE_UPCODE);
  -- B1: Select Bang du lieu nguon
  SELECT B.TABLE_NAME
  INTO V_TABLE_SRC
  FROM VAS_SUB_SERVICE A,
    VAS_SUB_TABLE B
  WHERE A.TABLE_ID           = B.ID
  AND A.MPS_SUB_SERVICE_CODE = OLD_NAME
  AND ROWNUM                <= 1;
  DBMS_OUTPUT.PUT_LINE ('v_table_src:' || V_TABLE_SRC);
  
  -- B2: Select Bang du lieu dich
  SELECT B.TABLE_NAME
  INTO V_TABLE_DEST
  FROM VAS_SUB_SERVICE A,
    VAS_SUB_TABLE B
  WHERE A.TABLE_ID       = B.ID
  AND A.SUB_COMMAND = SUB_SERVICE_COMMAND
  AND ROWNUM            <= 1;
  DBMS_OUTPUT.PUT_LINE ('v_table_dest:' || V_TABLE_DEST);
  
  -- B2: Select ID dich vu dich
  SELECT ID
  INTO SUB_SERVICE_ID_DEST
  FROM VAS_SUB_SERVICE
  WHERE STATUS         > 0
  AND SUB_COMMAND = SUB_SERVICE_COMMAND
  AND ROWNUM           = 1;
  DBMS_OUTPUT.PUT_LINE ('sub_service_id_dest:' || SUB_SERVICE_ID_DEST);
  
  DBMS_OUTPUT.PUT_LINE ('reg_time:' || REG_TIME);
  --- Kiem tra ID Dich vu Dich
  IF SUB_SERVICE_ID_DEST > 0 THEN
  --- B3: Kiem tra bang nguon = Bang Dich
    IF V_TABLE_SRC       = V_TABLE_DEST THEN
    --- B4: Thuc hien update
      QUERY_UPDATE      := 'UPDATE ' || V_TABLE_SRC || ' SET sub_service_id  =' || SUB_SERVICE_ID_DEST || ',                  
          reg_status        =' || DATE_UPCODE || ', unreg_reason      = 8                
        WHERE status > 0 AND time_register   < to_date(''' || REG_TIME || ''', ''yyyymmdd hh24miss'')                
          AND sub_service_id IN 
            (SELECT id                    
            FROM vas_sub_service                    
            WHERE mps_sub_service_code = ''' || OLD_NAME || '''AND status > 0) 
              AND isdn NOT IN 
                  (SELECT isdn 
                  FROM VAS_SUB_REG_ALL A, vas_sub_service b                    
                  WHERE a.sub_service_id     = b.id
                    AND a.status > 0 AND b.status = 1 
                    AND b.MPS_SUB_SERVICE_CODE =''' || NEW_NAME || ''')';
      DBMS_OUTPUT.PUT_LINE ('QUERY_UPDATE:' || QUERY_UPDATE);
      EXECUTE IMMEDIATE QUERY_UPDATE;
      COMMIT;
    ELSE
    --- B5: Thuc hien insert dau do update huy
      QUERY_INSERT := 'insert into ' || V_TABLE_DEST || ' (ID , ISDN , TIME_REGISTER , TIME_UNREGISTER , STATUS , PARAMETER , SUB_SERVICE_ID ,
              TYPE, CUST_STATUS, CHARGED , TOTAL_FAIL , PREPARED , RECHARGED , ALREADY_CHARGED , CHARGED_DATE , OLD_CUST , RETRY_SEND , KM_CODE , CHARGE_NEXT_TIME ,
              IS_KM , ALREADY_PREPARED , EXPORTED , DATE_END_FREE , TIME_UPDATE_PREPARE , PROCESS_TIME_CHARGE , PROCESS_CHARGE , TIME_SEND_WARNING , REG_STATUS , UNREG_REASON) 
          select VAS_SUB_SEQ.NEXTVAL , ISDN , TIME_REGISTER , TIME_UNREGISTER , STATUS , PARAMETER , ' || SUB_SERVICE_ID_DEST || ', 
              TYPE, CUST_STATUS, CHARGED , TOTAL_FAIL , PREPARED , RECHARGED , ALREADY_CHARGED , CHARGED_DATE , OLD_CUST , RETRY_SEND , KM_CODE , CHARGE_NEXT_TIME ,
              IS_KM , ALREADY_PREPARED , EXPORTED , DATE_END_FREE , TIME_UPDATE_PREPARE , PROCESS_TIME_CHARGE , PROCESS_CHARGE , TIME_SEND_WARNING , ID , 8  
          from ' || V_TABLE_SRC || 
          ' where status > 0 and sub_service_id in (select id from sms8000.vas_sub_service where status > 0 and mps_sub_service_code = ''' || OLD_NAME || ''')
              and time_register < to_date(''' || REG_TIME || ''', ''yyyymmdd hh24miss'') 
              AND isdn NOT IN (SELECT isdn FROM sms8000.vas_Sub_reg_all a, sms8000.vas_sub_service b WHERE a.sub_service_id     = b.id AND a.status > 0 AND b.status = 1 AND b.MPS_SUB_SERVICE_CODE = ''' || NEW_NAME || ''')';
      DBMS_OUTPUT.PUT_LINE ('QUERY_INSERT:' || QUERY_INSERT);
      EXECUTE IMMEDIATE QUERY_INSERT;
      QUERY_CANCEL := 'update ' || V_TABLE_SRC || ' set reg_status = status, status = 0, time_unregister = to_date(''' || DATE_UPCODE || ''', ''yyyymmdd''), unreg_reason = 8
            where status > 0 and sub_service_id in (select id from sms8000.vas_sub_service where status > 0 and mps_sub_service_code = ''' || OLD_NAME || ''') 
              and time_register < to_date(''' || REG_TIME || ''', ''yyyymmdd hh24miss'')
              AND ID IN (SELECT REG_STATUS FROM ' || V_TABLE_DEST || ' WHERE UNREG_REASON = 8 AND SUB_SERVICE_ID =' || SUB_SERVICE_ID_DEST || ')';
      DBMS_OUTPUT.PUT_LINE ('QUERY_CANCEL:' || QUERY_CANCEL);
      EXECUTE IMMEDIATE QUERY_CANCEL;
      COMMIT;
    END IF;
  END IF;
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."REQUEST_ENQUEUE" (
   provider    IN   VARCHAR2,                                     -- Ten SMSC
   gateway     IN   VARCHAR2,                                      -- Gateway
   sessionid   IN   VARCHAR2,                              -- Max + 1 (GW MT)
   sender      IN   VARCHAR2,
   receiver    IN   VARCHAR2,                                 -- 156, 8000...
   contentmo   IN   VARCHAR2,                                   -- MO content
   timemo      IN   NUMBER,                -- Thoi gian nhan MO in miliseconds
   command     IN   VARCHAR2
)
IS
   queue_options        DBMS_AQ.enqueue_options_t;
   message_properties   DBMS_AQ.message_properties_t;
   MESSAGE_ID           RAW (16);
   my_message           message_request;
BEGIN
   MY_MESSAGE :=
      message_request (provider,
                             gateway,
                             sessionid,
                             'VASP85',
                             sender,
                             receiver,
                             contentmo,
                             timemo,
                             command
                            );
   DBMS_AQ.enqueue (queue_name              => 'THANG_MO',
                    enqueue_options         => queue_options,
                    message_properties      => message_properties,
                    payload                 => my_message,
                    msgid                   => message_id
                   );
   COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."RESPONSE_ENQUEUE" (
   provider      IN   VARCHAR2,
   gateway       IN   VARCHAR2,
   messageid     IN   VARCHAR2,
   sessionid     IN   VARCHAR2,
   serviceid     IN   VARCHAR2,
   sender        IN   VARCHAR2,
   receiver      IN   VARCHAR2,
   prcrtn        IN   INTEGER,
   status        IN   INTEGER,
   contenttype   IN   INTEGER,
   contentmt     IN   VARCHAR2,
   timemt        IN   NUMBER
)
IS
   r_enqueue_options   DBMS_AQ.enqueue_options_t;
   r_msg_properties    DBMS_AQ.message_properties_t;
   nt_msg_properties   DBMS_AQ.message_properties_array_t;
   nt_payloads         aq_array_response;
   nt_msg_ids          DBMS_AQ.msgid_array_t;
   v_enqueued_cnt      PLS_INTEGER;
BEGIN
   nt_payloads := aq_array_response ();
   nt_msg_properties := DBMS_AQ.message_properties_array_t ();
   nt_msg_ids := DBMS_AQ.msgid_array_t ();
   nt_payloads := aq_array_response ();
   nt_payloads.EXTEND;
   nt_payloads (nt_payloads.LAST) :=
      message_response (provider,
                        gateway,
                        messageid,
                        sessionid,
                        serviceid,
                        sender,
                        receiver,
                        prcrtn,
                        status,
                        contenttype,
                        contentmt,
                        timemt
                       );
   nt_msg_properties.EXTEND;
   nt_msg_properties (nt_msg_properties.LAST) := r_msg_properties;

   IF (nt_payloads.COUNT IS NOT NULL AND nt_payloads.COUNT > 0)
   THEN
      V_ENQUEUED_CNT :=
         DBMS_AQ.enqueue_array (queue_name                    => 'THANG_RES',
                                enqueue_options               => r_enqueue_options,
                                array_size                    => nt_payloads.COUNT,
                                message_properties_array      => nt_msg_properties,
                                payload_array                 => nt_payloads,
                                msgid_array                   => nt_msg_ids
                               );
      COMMIT;
      DBMS_OUTPUT.put_line (   'Enqueued ['
                            || TO_CHAR (v_enqueued_cnt)
                            || '] messages.'
                           );
      DBMS_OUTPUT.put_line (   'Received ['
                            || TO_CHAR (nt_msg_ids.COUNT)
                            || '] message IDs.'
                           );
   END IF;
END;

CREATE OR REPLACE PROCEDURE SMS8000."RUN_KPI_ONLINE" 
IS
  R_DATE DATE := TRUNC(SYSDATE);
BEGIN
  KPI_8000_ONLINE.INSERT_SERVICE (R_DATE );
  KPI_8000_ONLINE.UPDATE_TOTAL_SUB(R_DATE );
  KPI_8000_ONLINE.UPDATE_WAIT_CHARGE(R_DATE );
  KPI_8000_ONLINE.UPDATE_TOTAL_CHARGE(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_SUCCESS(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_FAIL_10(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_FAIL_15(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_FAIL_TIMEOUT(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_FAIL_OTHER(R_DATE );
  KPI_8000_ONLINE.UPDATE_CHARGE_FAIL(R_DATE );
  INSERT INTO REPORT_LOG(DESCRIPTION, BEGIN_DATE, END_DATE, STATUS )
    VALUES ('RUN_KPI_ONLINE', R_DATE, SYSDATE, 'OK' );
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE SMS8000."SP_CLEAR_OLD_MLOG" is
begin
   DBMS_OUTPUT.put_line ('---Start----');
   delete from MLOG$_AU_CP t where t.snaptime$$ < sysdate-1;
   delete from MLOG$_VAS_SERVICE t where t.snaptime$$ < sysdate-1;
   delete from MLOG$_VAS_SERVICE_NUMBER t where t.snaptime$$ < sysdate-1;
   delete from MLOG$_VAS_SUB_REG t where t.snaptime$$ < sysdate-1;
   delete from MLOG$_VAS_SUB_SERVICE t where t.snaptime$$ < sysdate-1;
   delete from MLOG$_VAS_SUB_TEXTBASE_SER t where t.snaptime$$ < sysdate-1;
   commit;
   DBMS_OUTPUT.put_line ('---Finish----');
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line (SUBSTR (   'Error '
                                    || TO_CHAR (SQLCODE)
                                    || ': '
                                    || SQLERRM,
                                    1,
                                    255
                                   )
                           );
end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_CLEAR_OLD_REPORT_LOG" 
IS
   r_date         DATE;

BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;

   delete from report_log where end_date < trunc(r_date)-15;
   COMMIT;

   DBMS_OUTPUT.put_line ('finish clear old report log');
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line ('Error ' || SQLERRM);
END;

CREATE OR REPLACE PROCEDURE SMS8000."SP_ENCPASS" (p_phone in varchar2, p_answer out varchar2) is
  answer varchar2(15);
  alldigits varchar2(36);
  fill varchar2(5);
  v_date varchar2(5);
  v_phone varchar2(15);
  len int;
  v_val number(38);
  base int;
begin
      If not is_digit(p_phone) then
         p_answer := '';
         return;
      end if;

      v_phone := p_phone;

      len := length(v_phone);

      If substr(v_phone,1,2) = '84' then
         v_phone := substr(v_phone,3,len-2);
      end if;
      If substr(v_phone,1,1)='0' then
         v_phone := substr(v_phone,2,len-1);
      end if;

      fill := '0';
      v_date := to_char(sysdate+2,'ddd') ;

      loop
             exit when fill not like '%0' and Length(fill) <> 1;
             fill := substr(to_char(systimestamp,'FF'),1,2);
      end loop;

      loop
          exit when Length(v_date) = 3;
           v_date := '0' ||  v_date;
       end loop;

      answer := '';
      base := 29;

      v_val := to_number(get_reverse(v_phone || v_date || fill));

       --@alldigits='ghi5j6kL8mnoPqr07sTu9Vwxyza4b1cd3ef2';

       alldigits := 'a4b1cd3ef2ghi5j6kL8mnoPqr07sTu9Vwxyz';

      loop

            exit when v_val = 0;

            answer := substr(alldigits, mod(v_val, base) + 1,1) || answer;

            v_val := trunc(v_val / base);

      End loop;

      p_answer := answer;

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_INSERT_DVXS" (
   my_service_code       IN   vas_service.service_code%TYPE,
                                                          --khoa chinh   XS TD
   my_service_desc       IN   vas_service.description%TYPE,
   my_service_content    IN   VARCHAR2,
   my_service_postdate   IN   VARCHAR2
)
IS
   exitsservice_code           NUMBER;
   default_parent_service_id   NUMBER;
   default_service_number_id   NUMBER;
   default_attr_content        NUMBER;
                                    --thuoc tinh bat buoc trong dich vu xo so
   default_attr_time           NUMBER;
                                    --thuoc tinh bat buoc trong dich vu xo so
   package_id_tmp              NUMBER;
   service_id_tmp              NUMBER;               -- bien xu ly service_id
   service_attr_id_tmp         NUMBER;                           --bien xu ly
   exits_tmp                   NUMBER;
BEGIN
   ------------------cac gia tri mac dinh
   exits_tmp := 0;                           --bien dung chung, bien tam thoi
   service_id_tmp := 0;                      --bien dung chung, bien tam thoi
   service_attr_id_tmp := 0;                 --bien dung chung, bien tam thoi
   default_parent_service_id := 2790;
   default_service_number_id := 11;
   default_attr_content := 1;           --thuoc tinh noi dung tin nhan tra ve
   default_attr_time := 2;              -- thuoc tinh thoi gian ket qua xo so
   ---------------bat dau code
   exitsservice_code := 0;              --mac dinh la chua ton tai dich vu do

   ----------------doan code test:
   --My_Service_Code := CONCAT('BMT',My_Service_Code);
   --check ton tai chua
   SELECT COUNT (*)
     INTO exitsservice_code
     FROM vas_service
    WHERE service_code = my_service_code;

   IF exitsservice_code = 0
   THEN
      --insert gia tri dich vu sub xo so: XS TD, XS TH;
      --Service-Type = 0 -> kieu sms
      INSERT INTO vas_service
                  (service_id, service_name,
                   service_code, description, service_type,
                   class_name,
                   parent_service_id, service_number_id, num_order,
                   status, service_number_ext_id, num_instance
                  )
           VALUES (vas_service_id_seq.NEXTVAL, my_service_code,
                   my_service_code, my_service_desc, 0,
                   'vasp.services.processor.SmsProcessor',
                   default_parent_service_id, default_service_number_id, 1,
                   1, 8, 1
                  );
   END IF;

   ------ da biet dc service_id cua dich vu vua insert xong, tao join den thuoc tinh neu chua ton tai
   SELECT service_id
     INTO service_id_tmp
     FROM vas_service
    WHERE service_code = my_service_code;

   ------ check ton tai 2 thuoc tinh trong bang join xem co cac thuoc tinh chua
   --check thuoc tinh Content
   SELECT COUNT (*)
     INTO exits_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_content                  --thuoc tinh Content
      AND service_id = service_id_tmp;

   IF exits_tmp = 0
   THEN
      INSERT INTO vas_service_attr
                  (service_attr_id, attr_id,
                   service_id, created_date, status
                  )
           VALUES (vas_service_attr_seq.NEXTVAL, default_attr_content,
                   service_id_tmp, SYSDATE, 1
                  );
   END IF;

   --check thuoc tinh TIME
   SELECT COUNT (*)
     INTO exits_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_time                        --thuoc tinh TIME
      AND service_id = service_id_tmp;

   IF exits_tmp = 0
   THEN
      INSERT INTO vas_service_attr
                  (service_attr_id, attr_id,
                   service_id, created_date, status
                  )
           VALUES (vas_service_attr_seq.NEXTVAL, default_attr_time,
                   service_id_tmp, SYSDATE, 1
                  );
   END IF;

------------------------------------------------------INSERT VALUE -------------------------------------
   SELECT ser_attr_value_package_seq.NEXTVAL
     INTO package_id_tmp
     FROM DUAL;              --Pakage_ID cua 1 ban ghi bao gom CONTENT va TIME

   ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:
   --insert gia thi thuoc tinh CONTENT
   SELECT service_attr_id
     INTO service_attr_id_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_content AND service_id = service_id_tmp;

   --
   INSERT INTO vas_service_attr_value
               (ID, service_attr_id,
                VALUE, package_id, created_date
               )
        VALUES (vas_service_attr_value_seq.NEXTVAL, service_attr_id_tmp,
                my_service_content, package_id_tmp, SYSDATE
               );

   --insert gia thi thuoc tinh TIME
   SELECT service_attr_id
     INTO service_attr_id_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_time AND service_id = service_id_tmp;

   --
   INSERT INTO vas_service_attr_value
               (ID, service_attr_id,
                VALUE, package_id, created_date
               )
        VALUES (vas_service_attr_value_seq.NEXTVAL, service_attr_id_tmp,
                my_service_postdate, package_id_tmp, SYSDATE
               );
END;

CREATE OR REPLACE PROCEDURE SMS8000."SP_INSERT_OCS_BARRING_COMMAND" 
IS
   batch_number   NUMBER;
   r_date DATE;

   CURSOR vas_sub_reg_cursor(p_date DATE)
   IS
      SELECT isdn
        FROM vas_sub_reg
       WHERE status = 3 and already_charged = 1 and charged > 0 and time_register < p_date;

BEGIN
     select sysdate
     into r_date
     from dual;

     DBMS_OUTPUT.put_line ('-- START INSERT PROCESS --');
     DBMS_OUTPUT.put_line (TO_CHAR (r_date, 'dd/MM/yyyy hh24:mi:ss'));

   FOR v_sub_reg_cursor IN vas_sub_reg_cursor (r_date)
   LOOP
      INSERT INTO ocs_barring_command
             (id,command,ocs_cdr_datetime,status,isdn,success_err_code)
           VALUES
           (charging_seq.nextval,
           'IN_VIEWACNTINFO:MSISDN=' || v_sub_reg_cursor.isdn,
           sysdate,'0', v_sub_reg_cursor.isdn,'0,188');

      batch_number := batch_number + 1;

      IF batch_number = 1000
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
   END LOOP;

   COMMIT;

   DBMS_OUTPUT.put_line ('-- FINISH INSERT PROCESS --');
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line (SUBSTR (   'Error '
                                    || TO_CHAR (SQLCODE)
                                    || ': '
                                    || SQLERRM,
                                    1,
                                    255
                                   )
                           );
END;                                                                -- Procedure;

CREATE OR REPLACE PROCEDURE SMS8000."SP_INSERT_VAS_PROVINCE" (
   old_province_name   IN   vas_province.province_name%TYPE,
   old_province_code    IN   vas_province.province_code%TYPE
)
IS
   exits   NUMBER;
BEGIN
   exits := 0;

   SELECT COUNT (*)
     INTO exits
     FROM vas_province
    WHERE province_code = old_province_code;

   IF exits = 0
   THEN
      INSERT INTO vas_province
                  (ID, province_name,
                   province_code
                  )
           VALUES (vas_province_sequence.NEXTVAL, old_province_name,
                   old_province_code
                  );
   END IF;
END;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_BDMG" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:=3330;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);


end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_BUS" 
(
   MATUYEN in nvarchar2,
   TENTUYEN in nvarchar2,
   CHITIET in nvarchar2,
   LUOTDI in nvarchar2,
   LUOTVE in nvarchar2,
   CITY in nvarchar2
)
is
    default_Attr_MATUYEN number;
    default_Attr_TenTuyen number;
    default_Attr_ChiTiet number;
    default_Attr_LuotDi number;
    default_Attr_LuotVe number;
    default_Attr_CiTy number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    default_Attr_MATUYEN:=2511;  -- service_attr_id_MATUYEN
    default_Attr_TenTuyen:=2512;  -- service_attr_id_TENTUYEN
    default_Attr_ChiTiet:=2515;    -- service_attr_id_ChiTiet
    default_Attr_LuotDi:=2516;  -- service_attr_id_LuotDi
    default_Attr_LuotVe:=2519; -- service_attr_id_LuotVe
    default_Attr_CiTy:=3070; -- service_attr_id_CiTy
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---MATUYEN
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_MATUYEN,MATUYEN,Package_ID_tmp,sysdate);
    ---TENTUYEN
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_TenTuyen,TENTUYEN,Package_ID_tmp,sysdate);
    --chittiet
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_ChiTiet,CHITIET,Package_ID_tmp,sysdate);
    ---LUOTDI
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_LuotDi,LUOTDI,Package_ID_tmp,sysdate);
    ---LUOTVE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_LuotVe,LUOTVE,Package_ID_tmp,sysdate);
    ---CITY
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_CiTy,CITY,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_BXHBD" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    CODE in Vas_Service_Attr_value.value%TYPE   -- CHAMPION_CODE ma giai dau vi du CHAMPION_CODE = ANHA hoac ANHB , C1 , C2
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_CODE number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:=2176;
    Vas_Ser_Attr_VAL_CODE:=2174;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,CODE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_DIEMBAO" (
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh




    Vas_Ser_Attr_VAL_CONTENT:=3810;
    Vas_Ser_Attr_VAL_TIME:=3811;

    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));
    ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TIME,POSTDATE,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_DTTN" 
   (
    PHONE_CODE in Vas_Service_Attr_value.value%TYPE,
    CONTENT in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_TENMODEL number;
    Vas_Ser_Attr_VAL_TINHNANG number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh




    Vas_Ser_Attr_VAL_TENMODEL:=2156;
    Vas_Ser_Attr_VAL_TINHNANG:=2155;

    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TENMODEL,PHONE_CODE,Package_ID_tmp,sysdate);
    ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TINHNANG,CONTENT,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_HANGKHONG" 
(
   DIEMDI in nvarchar2,
   DIEMDEN in nvarchar2,
   NOIDUNG in nvarchar2
)
is
    Vas_Serv_Attr_VAL_FROM number;
    Vas_Serv_Attr_VAL_TO number;
    Vas_Serv_Attr_VAL_ND number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Serv_Attr_VAL_FROM:=3050;    -- FROM_ADDRESS  = 702
    Vas_Serv_Attr_VAL_TO:=3051;      -- TO_ADDRESS = 704
    Vas_Serv_Attr_VAL_ND:=3053;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---FROM
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Serv_Attr_VAL_FROM,DIEMDI,Package_ID_tmp,sysdate);
    ---TO
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Serv_Attr_VAL_TO,DIEMDEN,Package_ID_tmp,sysdate);
    --ND
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Serv_Attr_VAL_ND,NOIDUNG,Package_ID_tmp,sysdate);
end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_KQBD" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    CODE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_CODE number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:=1491;
    Vas_Ser_Attr_VAL_CODE:=1492;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,CODE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_LT" 
(
    SoTau in Vas_Service_Attr_value.value%TYPE,
    GioDi in Vas_Service_Attr_value.value%TYPE,
    GioDen in Vas_Service_Attr_value.value%TYPE,
    DiemDi in Vas_Service_Attr_value.value%TYPE,
    DiemDen in Vas_Service_Attr_value.value%TYPE,
    CheDoChay in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_SoTau number;
    Vas_Ser_Attr_VAL_GioDi number;
    Vas_Ser_Attr_VAL_GioDen number;
    Vas_Ser_Attr_VAL_DiemDi number;
    Vas_Ser_Attr_VAL_DiemDen number;
    Vas_Ser_Attr_VAL_CheDoChay number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_SoTau:=3130;
    Vas_Ser_Attr_VAL_GioDi:=3131;
    Vas_Ser_Attr_VAL_GioDen:=3132;
    Vas_Ser_Attr_VAL_DiemDi:=3133;
    Vas_Ser_Attr_VAL_DiemDen:=3134;
    Vas_Ser_Attr_VAL_CheDoChay:=3135;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---Vas_Ser_Attr_VAL_SoTau
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_SoTau,SoTau,Package_ID_tmp,sysdate);
    ---Vas_Ser_Attr_VAL_GioDi
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_GioDi,GioDi,Package_ID_tmp,sysdate);
    ---Vas_Ser_Attr_VAL_GioDen
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_GioDen,GioDen,Package_ID_tmp,sysdate);
    ---Vas_Ser_Attr_VAL_DiemDi
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_DiemDi,DiemDi,Package_ID_tmp,sysdate);
    --Vas_Ser_Attr_VAL_DiemDen
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_DiemDen,DiemDen,Package_ID_tmp,sysdate);
    --Vas_Ser_Attr_VAL_CheDoChay
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CheDoChay,CheDoChay,Package_ID_tmp,sysdate);
end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_LTDBD" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    CODE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_CODE number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:=2184;
    Vas_Ser_Attr_VAL_CODE:=2182;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,CODE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_SERVICE_BONGDA" (
   my_service_code   IN   vas_service.service_code%TYPE,            --khoa chinh
   my_service_desc   IN   vas_service.description%TYPE
)
IS
   exitsservice_code           NUMBER;
   default_parent_service_id   NUMBER;
   default_service_number_id   NUMBER;
   default_attr_content        NUMBER;
                                      --thuoc tinh bat buoc trong dich vu xo so
   default_attr_time           NUMBER;
                                      --thuoc tinh bat buoc trong dich vu xo so
   service_id_tmp              NUMBER;                 -- bien xu ly service_id
   exits_tmp                   NUMBER;
BEGIN
   ------------------cac gia tri mac dinh
   exits_tmp := 0;                             --bien dung chung, bien tam thoi
   service_id_tmp := 0;                        --bien dung chung, bien tam thoi
   default_parent_service_id := 2330;
   default_service_number_id := 8;
   default_attr_content := 582;           --thuoc tinh noi dung tin nhan tra ve
   default_attr_time := 584;              -- thuoc tinh thoi gian ket qua xo so
   ---------------bat dau code
   exitsservice_code := 0;                --mac dinh la chua ton tai dich vu do

   ----------------doan code test:
   --My_Service_Code := CONCAT('BMT',My_Service_Code);
   --check ton tai chua
   SELECT COUNT (*)
     INTO exitsservice_code
     FROM vas_service
    WHERE service_code = my_service_code;

   IF exitsservice_code = 0
   THEN
      --insert gia tri dich vu sub xo so: XS TD, XS TH;
      --Service-Type = 0 -> kieu sms
      INSERT INTO vas_service
                  (service_id, service_name,
                   service_code, description, service_type,
                   class_name, parent_service_id,
                   service_number_id, num_order, status
                  )
           VALUES (vas_service_id_seq.NEXTVAL, my_service_code,
                   my_service_code, my_service_desc, 0,
                   'vasp.services.processor.SmsXS', default_parent_service_id,
                   default_service_number_id, 1, 1
                  );
   END IF;

   ------ da biet dc service_id cua dich vu vua insert xong, tao join den thuoc tinh neu chua ton tai
   SELECT service_id
     INTO service_id_tmp
     FROM vas_service
    WHERE service_code = my_service_code;

   ------ check ton tai 2 thuoc tinh trong bang join xem co cac thuoc tinh chua
   --check thuoc tinh Content
   SELECT COUNT (*)
     INTO exits_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_content                    --thuoc tinh Content
      AND service_id = service_id_tmp;

   IF exits_tmp = 0
   THEN
      INSERT INTO vas_service_attr
                  (service_attr_id, attr_id,
                   service_id, status
                  )
           VALUES (vas_service_attr_seq.NEXTVAL, default_attr_content,
                   service_id_tmp, 1
                  );
   END IF;

   --check thuoc tinh TIME
   SELECT COUNT (*)
     INTO exits_tmp
     FROM vas_service_attr
    WHERE attr_id = default_attr_time                          --thuoc tinh TIME
      AND service_id = service_id_tmp;

   IF exits_tmp = 0
   THEN
      INSERT INTO vas_service_attr
                  (service_attr_id, attr_id,
                   service_id, status
                  )
           VALUES (vas_service_attr_seq.NEXTVAL, default_attr_time,
                   service_id_tmp, 1
                  );
   END IF;
END;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_SUB" 
   (  SUB_SERVICE_ID IN VAS_SUB_REG.sub_service_id%TYPE,
      ISDN in VAS_SUB_REG.isdn%TYPE,
      TIME_REGISTER in varchar2,
      STATUS in VAS_SUB_REG.status%TYPE,
      CUST_STATUS in VAS_SUB_REG.cust_status%TYPE,
      Parameter in VAS_SUB_REG.parameter%TYPE,
      receiver in VAS_SUB_REG.receiver%TYPE,
      charge_status in VAS_SUB_REG.charge_status%TYPE
)
is
    var_supply varchar(100);
    var_nodeID varchar(100);
    var_gateway varchar(100);
    var_type number;
    var_vaspclient varchar(100);
    var_charge_status varchar(100);
begin
    ------------------cac gia tri mac dinh
    var_supply:='simulator_sao';
    var_nodeID:='1';
    var_gateway:='smsgatelocal';
    var_type:=0;
    var_vaspclient:='sms8000te';
    var_charge_status:='000';

    ------------------------------------------------------INSERT VALUE -------------------------------------
   -- select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    if STATUS = 0 then
     insert into Vas_sub_reg(ID,ISDN,Time_register,time_unregister,status,parameter,sub_service_id,supply,receiver,node_id,gateway,type,vaspclient,charge_status,cust_status)
        values(Vas_sub_SEQ.NEXTVAL,ISDN,to_date(TIME_REGISTER,'YYYYMMDDHH24MISS'),to_date(TIME_REGISTER,'YYYYMMDDHH24MISS'),STATUS,Parameter,sub_service_id,var_supply,receiver,var_nodeID,var_gateway,var_type,var_vaspclient,charge_status,cust_status);

    else
    insert into Vas_sub_reg(ID,ISDN,Time_register,status,parameter,sub_service_id,supply,receiver,node_id,gateway,type,vaspclient,charge_status,cust_status)
        values(Vas_sub_SEQ.NEXTVAL,ISDN,to_date(TIME_REGISTER,'YYYYMMDDHH24MISS'),STATUS,Parameter,sub_service_id,var_supply,receiver,var_nodeID,var_gateway,var_type,var_vaspclient,charge_status,cust_status);
    end if;

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_TAXI" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    PROVICE in Vas_Service_Attr_value.value%TYPE
)
is
    default_Attr_CONTENT number;
    default_Attr_PROVINCE number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    default_Attr_CONTENT:=3031;
    default_Attr_PROVINCE:=3030;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_PROVINCE,PROVICE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_TG" 
(
    CurrencyCode in Vas_Service_Attr_value.value%TYPE,
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CODE number;
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CODE:=3931;
    Vas_Ser_Attr_VAL_CONTENT:=1577;
    Vas_Ser_Attr_VAL_TIME:=3065;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));
    ---TIME
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TIME,POSTDATE,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,CurrencyCode,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));


end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_THOITIET" 
(
    PROVINCE in Vas_Service_Attr_value.value%TYPE,
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_PROVINCE number;
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_PROVINCE:=3062;
    Vas_Ser_Attr_VAL_TIME:=3063;
    Vas_Ser_Attr_VAL_CONTENT:=3064;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---TIME
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TIME,POSTDATE,Package_ID_tmp,sysdate);
    ---PROVINCE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_PROVINCE,PROVINCE,Package_ID_tmp,sysdate);


end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_TLBD" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    CODE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_CODE number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:=2178;
    Vas_Ser_Attr_VAL_CODE:=2179;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,CODE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_TUDIEN" 
   ( VOCABULARY IN Vas_Service_Attr_value.value%TYPE,
     MEANING IN Vas_Service_Attr_value.value%TYPE)
   IS

    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_WORD number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CONTENT:= 3770 ;
    Vas_Ser_Attr_VAL_WORD:=3771 ;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_WORD,VOCABULARY,Package_ID_tmp,sysdate);
    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_WORD,MEANING,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_TV" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    DATE_TIME in Vas_Service_Attr_value.value%TYPE,
    CHANNEL in Vas_Service_Attr_value.value%TYPE
)
is
    default_Attr_CONTENT number;
    default_Attr_DATE_TIME number;
    default_Attr_CHANNEL number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    default_Attr_CONTENT:=3432;
    default_Attr_DATE_TIME:=3430;
    default_Attr_CHANNEL:=3431;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---DATE_TIME
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_DATE_TIME,DATE_TIME,Package_ID_tmp,sysdate);
     ---DATE_TIME
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,default_Attr_CHANNEL, CHANNEL,Package_ID_tmp,sysdate);


end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_VANG" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE,
    type_service in number   -- type_service =0 : VANG
                             --  type_service =1 : VQT
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh


IF type_service = 0
 THEN
   -- VANG
    Vas_Ser_Attr_VAL_CONTENT:=1591;
    Vas_Ser_Attr_VAL_TIME:=3090;
END IF;
IF  type_service = 1 THEN
    --VQT
    Vas_Ser_Attr_VAL_CONTENT:=3792;
    Vas_Ser_Attr_VAL_TIME:=3793;
    END IF;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));
    ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TIME,POSTDATE,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_VAS_PREFIX" (
   My_Province_Name in nvarchar2,
   My_Prefix_Code in nvarchar2,
   My_VTT in nvarchar2,
   My_VNP in nvarchar2,
   My_VSM in nvarchar2,
   My_EVN in nvarchar2,
   My_SFONE in nvarchar2,
   My_OTHER1 in nvarchar2,
   My_OTHER2 in nvarchar2
)
is
exits number;
begin
    exits:=0;
    select count(*) into exits  from VAS_PREFIX where Province_Name=My_Province_Name;
    if exits=0  then
        insert into VAS_PREFIX(ID, Province_Name, Prefix_Code, VTT, VNP, VSM, EVN, SFONE, OTHER1, OTHER2)
            Values(vas_prefix_id_SEQ.NEXTVAL, My_Province_Name, My_Prefix_Code, My_VTT,My_VNP,My_VSM, My_EVN, My_SFONE, My_OTHER1, My_OTHER2);
    end if;
end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_VAS_REPAIR" (
    My_Command_Code in Vas_Repair.command_code%Type,
    My_Correct_Code in Vas_Repair.correct_code%Type,
    My_List_Code in Vas_Repair.list_code%Type
)
is
exits number;
begin
    exits:=0;
    select count(*) into exits  from vas_repair where Correct_Code=My_Correct_Code;
    if exits=0  then
        insert into Vas_Repair(ID,list_code,Command_code,correct_code)
         values(Vas_Repair_SEQ.NEXTVAL,My_List_Code,My_Command_Code,My_Correct_code);
    end if;
end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_XDT" 
(
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CONTENT number;
    Vas_Ser_Attr_VAL_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh




    Vas_Ser_Attr_VAL_CONTENT:=3742;
    Vas_Ser_Attr_VAL_TIME:=3743;

    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CONTENT,CONTENT,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));
    ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_TIME,POSTDATE,Package_ID_tmp,to_date(POSTDATE,'YYYYMMDDHH24MISS'));

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_XE" 
(
    sCODE in Vas_Service_Attr_value.value%TYPE,
    sModel in Vas_Service_Attr_value.value%TYPE,
    sGiaTien in Vas_Service_Attr_value.value%TYPE,
    sThongSo in Vas_Service_Attr_value.value%TYPE
)
is
    Vas_Ser_Attr_VAL_CODE number;
    Vas_Ser_Attr_VAL_MODEL number;
    Vas_Ser_Attr_VAL_GIATIEN number;
    Vas_Ser_Attr_VAL_THONGSO number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    Vas_Ser_Attr_VAL_CODE:=2161;
    Vas_Ser_Attr_VAL_MODEL:=3110;
    Vas_Ser_Attr_VAL_GIATIEN:=3111;
    Vas_Ser_Attr_VAL_THONGSO:=3112;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CODE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_CODE,sCODE,Package_ID_tmp,sysdate);
    ---MODEL
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_MODEL,sModel,Package_ID_tmp,sysdate);
    ---sGiaTien
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_GIATIEN,sGiaTien,Package_ID_tmp,sysdate);
    ---THongsO
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,Vas_Ser_Attr_VAL_THONGSO,sThongSo,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_MIGRATE_XS" 
(
    PROVICE in Vas_Service_Attr_value.value%TYPE,
    CONTENT in Vas_Service_Attr_value.value%TYPE,
    POSTDATE in Vas_Service_Attr_value.value%TYPE
)
is
    df_SERVICE_ATTR_ID_PROVINCE number;
    df_SERVICE_ATTR_ID_CONTENT number;
    df_SERVICE_ATTR_ID_TIME number;
    Package_ID_tmp number;
begin
    ------------------cac gia tri mac dinh
    df_SERVICE_ATTR_ID_CONTENT:=1891;
    df_SERVICE_ATTR_ID_TIME:=1618;
    df_SERVICE_ATTR_ID_PROVINCE:=1861;
    Package_ID_tmp:=0;

    ------------------------------------------------------INSERT VALUE -------------------------------------
    select SER_ATTR_VALUE_PACKAGE_SEQ.NEXTVAL into Package_ID_tmp from dual;
    ------ da biet dc SERVICE_ATTR_ID cua thuoc tinh vua insert xong, insert database:

    ---CONTENT
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,df_SERVICE_ATTR_ID_CONTENT,CONTENT,Package_ID_tmp,sysdate);
    ---PostDate
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,df_SERVICE_ATTR_ID_TIME,POSTDATE,Package_ID_tmp,sysdate);
  ---PROVICE
    insert into Vas_Service_Attr_VALUE(ID,SERVICE_ATTR_ID,Value,Package_ID,created_date)
        values(Vas_Service_Attr_VALUE_SEQ.NEXTVAL,df_SERVICE_ATTR_ID_PROVINCE,PROVICE,Package_ID_tmp,sysdate);

end;

CREATE OR REPLACE PROCEDURE SMS8000."SP_SYNC_TRANS_LOG" (p_error OUT VARCHAR2)
IS
   batch_number   NUMBER;
   r_date         DATE;

   CURSOR trans_log_cursor
   IS
      SELECT * FROM
        (SELECT isdn, sub_service_id, charged_time, result, fee, cus_kind, exported, id, a.ROWID
          FROM trans_log@link_sms8000 a WHERE exported <> 0 OR result <> 0)
      WHERE rownum <= 30000;
BEGIN
   SELECT SYSDATE
     INTO r_date
     FROM DUAL;
   batch_number := 0;
   FOR v_trans_log_cursor IN trans_log_cursor ()
   LOOP
      INSERT INTO trans_log@link_aqreport
                  (isdn, sub_service_id, charged_time, result, fee, cus_kind, exported, id
                  )
           VALUES (v_trans_log_cursor.isdn, v_trans_log_cursor.sub_service_id,
                  v_trans_log_cursor.charged_time, v_trans_log_cursor.result, 
                  v_trans_log_cursor.fee, v_trans_log_cursor.cus_kind,
                  v_trans_log_cursor.exported, v_trans_log_cursor.id
                  );

      DELETE FROM trans_log@link_sms8000
            WHERE ROWID = v_trans_log_cursor.ROWID;

      batch_number := batch_number + 1;

      IF batch_number = 1000
      THEN
         COMMIT;
         batch_number := 0;
      END IF;
   END LOOP;

   COMMIT;

   INSERT INTO report_log
               (description, begin_date, end_date, status
               )
        VALUES ('sp_sync_trans_log', r_date, SYSDATE, 'OK'
               );

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      p_error := 'Error ' || SQLERRM;

      INSERT INTO report_log
                  (description, begin_date, end_date, status
                  )
           VALUES ('sp_sync_trans_log', r_date, SYSDATE, p_error
                  );

      COMMIT;
END;                                                                -- Procedure;

CREATE OR REPLACE PROCEDURE SMS8000."SP_USER_SUB_NEW" (
    r_date IN DATE)
  -- PROC FOR SUBSCRIPTION
IS
  --------------------------------------------------------------------------------
  service_result sys_refcursor;  -- Data List
  number_result sys_refcursor;   -- Data List
  query_service VARCHAR2 (1000); -- SQL String
  query_number  VARCHAR2 (1000); -- SQL String
  --------------------------------------------------------------------------------
  currmonth DATE;   -- First Date of Current Month
  nextmonth DATE;   -- First Date of Next Month
  prevmonth DATE;   -- First Date of Previous Month
  rpid      NUMBER; -- Report User ID
  --------------------------------------------------------------------------------
  subserviceid   NUMBER;        -- Service ID
  subservicecode VARCHAR2 (30); -- Service Code
  parentid       NUMBER;        -- Parent Service ID
  parentcode     VARCHAR2 (30);
  recv           VARCHAR2 (10); -- Receiver Number
  recvno         VARCHAR2 (10); -- Receiver Number
  --------------------------------------------------------------------------------
  newuser  NUMBER; -- Total New User
  outuser  NUMBER; -- Total Out User
  olduser  NUMBER; -- Total Old User
  totalnum NUMBER; -- Total User
  --------------------------------------------------------------------------------
BEGIN
  currmonth     := TRUNC (r_date, 'MM');
  nextmonth     := TRUNC (ADD_MONTHS (currmonth, 1), 'MM');
  prevmonth     := TRUNC (currmonth - 1, 'MM');
  query_service := 'select id,sub_command from vas_sub_service';
--  query_number  := 'select service_number,service_number as serviceno from vas_service_number       
--where service_number not like ''5_55'' union select ''5_55'' as        
--service_number,''5x55'' as serviceno from dual';
  OPEN service_result FOR query_service;
  LOOP
    FETCH service_result INTO subserviceid, subservicecode;
    EXIT
  WHEN service_result%NOTFOUND;
    DBMS_OUTPUT.put_line (subserviceid);
    -- Get Parent Service ID, Parent Service Code
    SELECT service_id,
      service_code
    INTO parentid,
      parentcode
    FROM vas_service_full
    WHERE service_id =
      (SELECT parent_service_id
      FROM vas_service_full
      WHERE service_id =
        (SELECT service_id
        FROM vas_sub_textbase_service
        WHERE sub_id = subserviceid
        AND ROWNUM   = 1
        )
      );
    DBMS_OUTPUT.put_line (parentid || '-' || parentcode);

      select count(*) INTO newuser from vas_Sub_reg_all a where a.TIME_REGISTER >= TRUNC(r_date) AND TIME_REGISTER < TRUNC(r_date + 1) and sub_Service_id = subserviceid;
      -- Count Out User
      SELECT COUNT(*) INTO OUTUSER FROM VAS_SUB_REG_ALL A WHERE A.TIME_UNREGISTER >= TRUNC(R_DATE) AND TIME_UNREGISTER < TRUNC(R_DATE + 1) AND SUB_SERVICE_ID = SUBSERVICEID;
      -- Count Old User
      SELECT COUNT(*) INTO olduser FROM VAS_SUB_REG_ALL A WHERE A.TIME_REGISTER < TRUNC(R_DATE) AND STATUS > 0 AND SUB_SERVICE_ID = SUBSERVICEID;
      
      totalnum    := newuser + olduser - outuser;
      IF ((newuser > 0) OR (outuser > 0) OR (olduser > 0)) THEN
        -- Count Report in nextdateent Month
        SELECT MAX (ID)
        INTO rpid
        FROM report_user
        WHERE report_date >= TRUNC (r_date)
        AND report_date    < TRUNC (r_date) + 1
        AND SERVICE_ID     = SUBSERVICEID
        AND TELCO_NAME     = '1';
        
        -- If id is null, Insert to DB
        IF rpid IS NULL THEN
          INSERT
          INTO report_user
            (
              receiver,
              report_date,
              new_user,
              out_user,
              old_user,
              telco_name,
              total_num,
              service_code,
              service_id,
              parent_code,
              parent_id
            )
            VALUES
            (
              '5x55',
              TRUNC (r_date),
              newuser,
              outuser,
              olduser,
              '1',
              totalnum,
              subservicecode,
              subserviceid,
              parentcode,
              parentid
            );
          -- If id is not null, Update to DB
        ELSE
          UPDATE report_user
          SET new_user = newuser,
            out_user   = outuser,
            old_user   = olduser,
            total_num  = totalnum
          WHERE ID     = rpid;
        END IF;
      END IF;
--    END LOOP;
    COMMIT;
  END LOOP;
END;

CREATE OR REPLACE PROCEDURE SMS8000."SUB_SEA_SELECT_AND_UPDATE" IS
 CURSOR x_cur IS
 SELECT ISDN
 FROM converted_sea
  WHERE status = 0
 FOR UPDATE;
BEGIN
   dbms_output.put_line('1-begin...');
   FOR x_rec IN x_cur
   LOOP
   dbms_output.put_line('isdn: ' || x_rec.isdn);
      UPDATE converted_sea
      SET status = 1
      WHERE CURRENT OF x_cur;
   END LOOP;
   COMMIT;
-- EXCEPTION
   -- WHEN exception_name THEN
     --   ROllBACK ;
END; -- Procedure

/*
CREATE OR REPLACE PROCEDURE SUB_SEA_SELECT_AND_UPDATE IS
 CURSOR x_cur IS
 SELECT pid, cash
 FROM parents
  WHERE cash < 35000
 FOR UPDATE;
BEGIN
   FOR x_rec IN x_cur
   LOOP
      UPDATE parents
      SET cash = FLOOR(cash)
      WHERE CURRENT OF x_cur;
   END LOOP;
   COMMIT;
END SUB_SEA_SELECT_AND_UPDATE;
*/;

CREATE OR REPLACE PROCEDURE SMS8000."TEST_150916" is
  SUBID NUMBER(10);
  soluong number(10);
  R_DATE DATE := TRUNC(SYSDATE);
  PAR_STR VARCHAR2(12) := 'DATA' || TO_CHAR(R_DATE, 'yyyymmdd');
  --C_DATA sys_refcursor;
  QUERYSTR varchar2(3000) ;
   V_COUNT NUMBER := 0;
   TYPE RC_TYPE IS REF CURSOR;
  C_DATA rc_type;
  BEGIN
  QUERYSTR := 'SELECT SUB_SERVICE_ID, COUNT(*) SOLUONG FROM (SELECT DISTINCT ISDN,SUB_SERVICE_ID 
    FROM TRANS_LOG_BEFORE PARTITION('|| PAR_STR ||')) GROUP BY SUB_SERVICE_ID';
  DBMS_OUTPUT.PUT_LINE('QUERYSTR: ' || QUERYSTR);
    DBMS_OUTPUT.PUT_LINE('PAR: ' || PAR_STR);
    OPEN C_DATA for QUERYSTR;
    
   -- LOOP
   -- FETCH C_DATA INTO subid, soluong;
    --  DBMS_OUTPUT.PUT('SUB_ID:' || subid);
   --   DBMS_OUTPUT.PUT('SOLUONG:' || SOLUONG);
      --UPDATE KPI_ONLINE SET TOTAL_WAIT_CHARGE = V_DATA.SOLUONG WHERE SUB_SERVICE_ID = V_DATA.SUB_SERVICE_ID AND REPORT_DATE = TRUNC(R_DATE);
      V_COUNT := V_COUNT + 1;
      IF V_COUNT = 100 THEN
        --    COMMIT;
            V_COUNT := 0;
      END IF;
 --   END LOOP;
 --   COMMIT;
  END;

CREATE OR REPLACE PROCEDURE SMS8000.thangnd_alarm_sms8000
IS
  --currentDate     Date    := TRUNC(sysdate);
  content_alarm VARCHAR2(400);
  SUM_FEE       NUMBER(15);
  TOPUP_FEE     NUMBER(15);
  WAIT_CHARGE   NUMBER(15);
  NOT_PREPARE NUMBER(15);
  prepared_in_day NUMBER(15);
  total_charge NUMBER(15);
  total_charge_sucess NUMBER(15);
  TOTAL_REGISTER     NUMBER(15);
  TOTAL_UNREGISTER     NUMBER(15);
  TOTAL_SUB   NUMBER(15);
  TOTAL_SUB_CHARGING   NUMBER(15);
  TOTAL_SUB_CHARGE_SUCCESS   NUMBER(15);
  PREPARE_XSTD NUMBER(15);
  PREPARED_XSTD NUMBER(15);

BEGIN
  --select VAS_SUB_MO_SEQ.nextval into id_seq from dual;
  SELECT COUNT(*) INTO PREPARE_XSTD FROM PREPARE_REQUEST WHERE MO_TIME > TRUNC(SYSDATE) AND SERVICE_ID = 2794;
  SELECT COUNT(*) INTO PREPARED_XSTD FROM VAS_SUB_MO_ALL WHERE MO_TIME > TRUNC(SYSDATE) AND SERVICE_ID = 2794;
  SELECT COUNT(*) INTO NOT_PREPARE FROM PREPARE_REQUEST WHERE MO_TIME > TRUNC(SYSDATE) - 1  AND MO_TIME < TRUNC(SYSDATE) AND PREPARED = 0;
  select count(*) into prepared_in_day from prepare_request where mo_time > trunc(sysdate) and PREPARED = 0;
--  select count(*) into WAIT_CHARGE from charge_Request where INSERT_TIME >= trunc(sysdate) and status = 0;
  select count(*) into total_charge from TRANS_LOG WHERE CHARGED_TIME > TRUNC(SYSDATE);
  select count(*) into total_charge_sucess from TRANS_LOG WHERE CHARGED_TIME > TRUNC(SYSDATE) and RESULT = 0;
  select count(*) into TOTAL_SUB from vas_sub_reg_all where status > 0;
  select count(*) into TOTAL_REGISTER from SUB_REGISTER_ALL where time_register > trunc(sysdate);
  select count(*) into TOTAL_UNREGISTER from SUB_REGISTER_ALL where time_unregister > trunc(sysdate);

select count(*) into TOTAL_SUB_CHARGING from VAS_SUB_REG_ALL VSR INNER JOIN VAS_SUB_SERVICE VSS ON VSS.ID = VSR.SUB_SERVICE_ID INNER JOIN VAS_SERVICE_NUMBER VSN
ON VSS.SERVICE_NUMBER_ID = VSN.SERVICE_NUMBER_ID WHERE VSR.STATUS IN (3, 4) AND VSR.TYPE = 0 AND VSR.ALREADY_CHARGED  in (0, 1) AND (VSR.TIME_REGISTER < TRUNC(SYSDATE) OR TOTAL_FAIL > 0)
AND (CHARGED_DATE < TRUNC(SYSDATE) OR CHARGED_DATE IS NULL) AND VSR.CUST_STATUS = 'PRE_01'AND (VSS.DAILY_CHARGE LIKE '%' || to_char(sysdate + 1, 'D') || '%' OR VSS.DAILY_CHARGE IS NULL ) AND (VSS.START_PENDING_CHARGE IS NULL
OR VSS.STOP_PENDING_CHARGE IS NULL OR VSS.START_PENDING_CHARGE > SYSDATE + 1 OR VSS.STOP_PENDING_CHARGE < SYSDATE + 1);

select count(*) into TOTAL_SUB_CHARGE_SUCCESS from VAS_SUB_REG_All where status = 1 and CHARGED_DATE >= TRUNC(SYSDATE);


  SELECT SUM(FEE)
  INTO SUM_FEE
  FROM TRANS_LOG
  WHERE CHARGED_TIME > TRUNC(SYSDATE)
  AND RESULT         = 0;
--  SELECT SUM(FEE)
--  INTO TOPUP_FEE
--  FROM TRANS_LOG
--  WHERE CHARGED_TIME > TRUNC(SYSDATE)
--  AND RESULT         = 0
--  AND FILE_NAME LIKE 'QCTT%';
SELECT to_char(sysdate,'dd-mm-yyyy hh24:mi') || '
Doanh thu:' || to_char(SUM_FEE, '99G999G999G999') || '
Ts TB den chu ky: ' || (TOTAL_SUB_CHARGE_SUCCESS + TOTAL_SUB_CHARGING) || '
Ts TB tru thanh cong: ' || (TOTAL_SUB_CHARGE_SUCCESS ) || '
Ts TB dang tru cuoc: ' || (TOTAL_SUB_CHARGING ) || '
TI LE: 0' || TRUNC((TOTAL_SUB_CHARGE_SUCCESS/(TOTAL_SUB_CHARGE_SUCCESS + TOTAL_SUB_CHARGING)),3) || '
Ts TB: ' || TOTAL_SUB || '
Ts DK: ' || TOTAL_REGISTER || '
Ts huy: ' || TOTAL_UNREGISTER || '
Ts charge: ' || total_charge || '
Ts charge thanh cong: ' || total_charge_sucess

  INTO content_alarm
  FROM dual;

INSERT INTO VAS_SUB_MO_1 (ID,SENDER,RECEIVER,SERVICE_ID,MESSAGE,COMMAND,MO_TIME,SUB_SERVICE_ID,CHARGED_ORDER,HOUR_RETURN_MESSAGE,CONTENT) 
VALUES(VAS_SUB_MO_SEQ.NEXTVAL,'ALARM8000','84868912689','99999','MTProactive','SubMTProactive',sysdate,'99999',
'0','0',CONTENT_ALARM || '. So ban tin chua prepare: ' || NOT_PREPARE || '. So ban tin da prepare trong ngay: ' || PREPARED_IN_DAY
|| '. SL prepare_request_xstd: ' || PREPARE_XSTD || '. SL prepare_vsm_xstd: ' || PREPARED_XSTD);



INSERT INTO VAS_SUB_MO_1 (ID,SENDER,RECEIVER,SERVICE_ID,MESSAGE,COMMAND,MO_TIME,SUB_SERVICE_ID,CHARGED_ORDER,HOUR_RETURN_MESSAGE,CONTENT) 
VALUES(VAS_SUB_MO_SEQ.NEXTVAL,'ALARM8000','84983000075','99999','MTProactive','SubMTProactive',SYSDATE,'99999','0','0',CONTENT_ALARM);

  COMMIT;

 commit;
END;

CREATE OR REPLACE PROCEDURE SMS8000."VTP_RECEIVED_SMS_MO" (pCONTENT VARCHAR2, pRECEIVER VARCHAR2, pSENDER VARCHAR2) IS
BEGIN
    INSERT INTO SMS_MO(
        SMS_MSG_ID  ,
        CONTENT     ,
        RECEIVER    ,
        TYPE        ,
        SENDER      ,
        STATUS      ,
        CREATEBY    ,
        CREATEDATE  
    )
    VALUES
    (
        GW_MO_SEQ.NEXTVAL,
        pCONTENT,
        pRECEIVER,
        0,
        pSENDER,
        0,
        0,
        SYSDATE
    );
   EXCEPTION
     WHEN OTHERS THEN
       RAISE;
END VTP_RECEIVED_SMS_MO;

CREATE OR REPLACE PROCEDURE SMS8000."VTP_SEND_SMS_MT" (cur OUT SYS_REFCURSOR) IS
BEGIN
    OPEN cur FOR    
    SELECT SMS_MSG_ID, SENDER, CONTENT, RECEIVER FROM SMS_MT WHERE ROWNUM < 100;
END VTP_SEND_SMS_MT;

CREATE OR REPLACE PROCEDURE SMS8000."VTP_UPDATE_SMS_MT" (pSMS_MSG_ID NUMBER) IS
BEGIN    
    INSERT INTO SMS_MT_HIS
    SELECT * FROM SMS_MT WHERE SMS_MSG_ID = pSMS_MSG_ID;
    
    DELETE FROM SMS_MT WHERE SMS_MSG_ID = pSMS_MSG_ID;
END VTP_UPDATE_SMS_MT;
